
#Область ОбщиеФункции
Функция ЗаписатьХранилищеВСтроку(пТаблица, пДата = Неопределено)
	Если пДата = Неопределено Тогда
		пДата = ТекущаяДата();
	КонецЕсли;
	
	мСтруктураПодстановок = Новый Структура();
	Для Итр = 1 по пТаблица.Колонки.Количество() Цикл
		мКолонка = пТаблица.Колонки[Итр - 1];
		Если Найти(мКолонка.Имя, "GUID") <> 0 Тогда
			мИмя = мКолонка.Имя;
			мКолонка.Имя = мИмя + "1";
			пТаблица.Колонки.Добавить(мИмя, Новый ОписаниеТипов("Строка"));
			мСтруктураПодстановок.Вставить(мИмя + "1", мИмя);
		КонецЕсли;
	КонецЦикла;
	
	Если мСтруктураПодстановок.Количество() <> 0 Тогда
		Для каждого мСтрока из пТаблица Цикл
			Для каждого мПараКлючЗначение из мСтруктураПодстановок Цикл
				Если мСтрока[мПараКлючЗначение.Ключ].Пустая() Тогда
					Продолжить;
				КонецЕсли;
				мСтрока[мПараКлючЗначение.Значение] = СокрЛП(мСтрока[мПараКлючЗначение.Ключ].УникальныйИдентификатор());
			Конеццикла;
		КонецЦикла;
	КонецЕсли;
	
	//Удалим лишние колонки
	Для каждого мПараКлючЗначение Из мСтруктураПодстановок Цикл
		пТаблица.Колонки.Удалить(мПараКлючЗначение.Ключ);
	КонецЦикла;
	
	мМассив = Новый Массив;
	мМассив.Добавить(пДата);
	мМассив.ДОбавить(пТаблица);
	
	мХранилище = Новый ХранилищеЗначения(мМассив, Новый СжатиеДанных(5));
	Возврат XMLСтрока(мХранилище);
КонецФункции

Функция НайтиЗапросомСправочникПоРеквизиту(пИмяСправочника, пИмяРеквизита, пЗначениеРеквизита, пЗаменитьУсловиеСтрокойИзПараметра = Ложь, пСтруктураПараметров = Неопределено) Экспорт
	тЗапрос = Новый Запрос("ВЫБРАТЬ
	|	тСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.#пИмяСправочника# КАК тСправочник
	|ГДЕ
	|	тСправочник.#пИмяРеквизита# = &ЗначениеРеквизита");
	тЗапрос.Текст = СтрЗаменить(тЗапрос.Текст, "#пИмяСправочника#", пИмяСправочника); 
	тЗапрос.Текст = СтрЗаменить(тЗапрос.Текст, "#пИмяРеквизита#", пИмяРеквизита); 
	Если пЗаменитьУсловиеСтрокойИзПараметра Тогда
		тЗапрос.Текст = СтрЗаменить(тЗапрос.Текст, "тСправочник." + пИмяРеквизита + " = &ЗначениеРеквизита", пЗначениеРеквизита);
		Попытка
			Для Каждого тПараметр Из пСтруктураПараметров Цикл
				тЗапрос.УстановитьПараметр(тПараметр.Ключ, тПараметр.Значение);
			КонецЦикла;
		Исключение
		КонецПопытки;
	Иначе
		тЗапрос.УстановитьПараметр("ЗначениеРеквизита", пЗначениеРеквизита);
	КонецЕсли;
	
	вЗначение = Справочники[пИмяСправочника].ПустаяСсылка();
	Попытка
		тРезультат = тЗапрос.Выполнить().Выбрать();
		Если тРезультат.Следующий() Тогда
			вЗначение = тРезультат.Ссылка;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат вЗначение;
КонецФункции

Функция ВыполнитьЗапрос(пСтруктураСоединения, пЗапрос, пТело = Неопределено) Экспорт
	мСоединение = Новый HTTPСоединение(пСтруктураСоединения.Сервер,
		пСтруктураСоединения.Порт,
		пСтруктураСоединения.ИмяПользователя,
		пСтруктураСоединения.Пароль,
		пСтруктураСоединения.Прокси,
		пСтруктураСоединения.Таймаут);
	мЗапрос = Новый HTTPЗапрос(пЗапрос);
	//Если пТело<>Неопределено Тогда
	//	мХранилище = Новый ХранилищеЗначения(пТело);
	//	мЗапрос.УстановитьТелоИзСтроки(XMLстрока(мХранилище));
	//КонецЕсли;
	Если пТело <> Неопределено Тогда
		мХранилище = Новый ХранилищеЗначения(пТело, Новый СжатиеДанных(5));
		мЗапрос.УстановитьТелоИзСтроки(XMLСтрока(мХранилище));
	КонецЕсли;
	мДанные = Неопределено;
	мОписаниеОшибки = "";
	мРезультат = мСоединение.POST(мЗапрос);
	Если мРезультат.КодСостояния <> 200 Тогда
		мОписаниеОшибки = "Ошибка выполнения! Код:" + мРезультат.КодСостояния + "; Тело:" + мРезультат.ПолучитьТелоКакСтроку();
	Иначе
		мДанные = XMLЗначение(Тип("ХранилищеЗначения"), мРезультат.ПолучитьТелоКакСтроку()).Получить();
	КонецЕсли;
	вДанные = Новый Структура("Результат, ОписаниеОшибки", мДанные, мОписаниеОшибки);
	Возврат вДанные;
КонецФункции

Функция ВыполнитьФункцию(пТело) Экспорт
	мСтруктураПараметров = XMLЗначение(Тип("ХранилищеЗначения"), пТело).Получить();
	Если ТипЗнч(мСтруктураПараметров) <> Тип("Структура") Или НЕ (мСтруктураПараметров.Свойство("ИмяФункции")) Или НЕ (мСтруктураПараметров.Свойство("МассивПараметров")) Тогда
		Возврат "Отсутствует ожидаемая структура с
		|параметрами в теле запроса: Новый Структура(""ИмяФункции, МассивПараметров"")";
	КонецЕсли;
	
	мИмяФункции = мСтруктураПараметров.ИмяФункции;
	мМассивПараметров = мСтруктураПараметров.МассивПараметров;
	
	мРезультатВыполнения = глОбщий.ВызватьФункциюКонфигурации(мИмяФункции, мМассивПараметров);
	Возврат XMLСтрока(Новый ХранилищеЗначения(мРезультатВыполнения, Новый СжатиеДанных(5)));
КонецФункции

Функция ПолучитьСтруктуруСоединения(пСервер, пПорт, пИмяПользователя, пПароль, пПрокси, пТаймаут, пИмяБазы, пИмяАПИ, пИмяМетода) Экспорт
	Возврат Новый Структура("Сервер, Порт, ИмяПользователя, Пароль, Прокси, Таймаут, ИмяБазы, ИмяАПИ, ИмяМетода", пСервер, пПорт, пИмяПользователя, пПароль, пПрокси, пТаймаут, пИмяБазы, пИмяАПИ, пИмяМетода);
КонецФункции

#КонецОбласти

#Область СинхронизацияЦентр
Функция СинхроЦентр(пМассив) Экспорт
	вРезультат = Неопределено;
	мТело = Новый Массив;
	мСтруктураСоединенияЦентр = ПолучитьСтруктуруСоединения("192.168.20.13", 80, "SERV", "SERVgfhjkm", Неопределено, 120, "ENTcentr", "flowAPI", "GETSYNCDATA");
	Для Каждого мСинхронизируемыйЭлемент Из пМассив Цикл
		мТело.Добавить(мСинхронизируемыйЭлемент);
	КонецЦикла;
	мНаборДанных = ВыполнитьЗапрос(мСтруктураСоединенияЦентр, "/" + мСтруктураСоединенияЦентр.ИмяБазы + "/hs/" + мСтруктураСоединенияЦентр.ИмяАПИ + "/" + мСтруктураСоединенияЦентр.ИмяМетода, мТело);
	Возврат вРезультат;
КонецФункции

Функция ПолучитьДанныеДляСинхронизации(пТело) Экспорт
	вДанные = Неопределено;
	мМассив = XMLЗначение(Тип("ХранилищеЗначения"), пТело).Получить();
	Для Каждого мЭлемент Из мМассив Цикл
		
	КонецЦикла;
	Возврат XMLСтрока(Новый ХранилищеЗначения(вДанные, Новый СжатиеДанных(5)));
КонецФункции
#КонецОбласти

#Область МобильноеПриложениеСТК
Функция ДанныеДляМобильногоПриложенияКТС() Экспорт
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	""Пользователи"" ВидСпр,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	ЗНАЧЕНИЕ(Справочник.ПользователиМобильногоПриложения.ПустаяСсылка) GUID,
	|	CправочникПользователи.Наименование КАК Наименование,
	|	Организации.ИНН КАК ОрганизацияИНН,
	|	CправочникПользователи.АдминистративныйДоступ КАК АдминистративныйДоступ,
	|	CправочникПользователи.Пинкод КАК Пинкод,
	|	CправочникПользователи.Гараж.Ссылка КАК ГаражGUID,
	|	CправочникПользователи.ФизЛицо КАК ФизЛицоGUID,
	|	ЛОЖЬ КАК ПометкаУдаления,
	|	"""" КАК ПолноеНаименование,
	|	"""" КАК Широта,
	|	"""" КАК Долгота,
	|	0 КАК ПорядокСортировки
	|ИЗ
	|	Справочник.ПользователиМобильногоПриложения КАК CправочникПользователи
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ИСТИНА
	|WHERE НЕ CправочникПользователи.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""КритерииОсмотра"" ВидСпр,
	|	ЛОЖЬ КАК ЭтоГруппа,
	|	ВопросыДляОсмотров.Ссылка КАК GUID,
	|	ВопросыДляОсмотров.Наименование КАК Наименование,
	|	Организации.ИНН КАК ОрганизацияИНН,
	|	ЛОЖЬ КАК АдминистративныйДоступ,
	|	"""" КАК Пинкод,
	|	ЗНАЧЕНИЕ(Справочник.уатГаражи.ПустаяСсылка) КАК ГаражGUID,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизЛицоGUID,
	|	ВопросыДляОсмотров.ПометкаУдаления,
	|	ВопросыДляОсмотров.ПолноеНаименование,
	|	"""" КАК Широта,
	|	"""" КАК Долгота,
	|	ВопросыДляОсмотров.ПорядокСортировки
	|ИЗ
	|	Справочник.ВопросыДляОсмотров КАК ВопросыДляОсмотров
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ИСТИНА");
	мТаблицаРезультата = мЗапрос.Выполнить().Выгрузить();
	
	Возврат	ЗаписатьХранилищеВСтроку(мТаблицаРезультата);
КонецФункции

Функция ПолучитьКомментарии(СтрДД, КодСостояния) Экспорт
	мСтруктура = XMLЗначение(Тип("ХранилищеЗначения"), СтрДД).Получить();
	Если ТипЗнч(мСтруктура) <> Тип("Структура") Тогда
		КодСостояния = 308;
		Возврат "Неправильный тип данных при передаче";
	КонецЕсли;

	мЗапрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1		// 0
	|	ОсмотрТС.Ссылка КАК Ссылка,
	|	ОсмотрТС.Дата КАК Дата,
	|	ОсмотрТС.Возврат КАК Возврат
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.ОсмотрТС КАК ОсмотрТС
	|ГДЕ
	|	ОсмотрТС.ТС.ГаражныйНомер = &ГарНомер И ОсмотрТС.НомерПЛ = &НомерПЛ И НЕ ОсмотрТС.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО ОсмотрТС.Дата УБЫВ
	|;
	|ВЫБРАТЬ		// 1
	|	Реквизиты.Дата КАК Дата,
	|	Реквизиты.Возврат КАК Возврат
	|ИЗ
	|	Реквизиты КАК Реквизиты
	|;
	|ВЫБРАТЬ		// 2
	|	ОсмотрТСРезультаты.Комментарий,
	|	ОсмотрТСРезультаты.ДатаВвода,
	|	ОсмотрТСРезультаты.Критерий
	|ИЗ
	|	Документ.ОсмотрТС.Результаты КАК ОсмотрТСРезультаты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Реквизиты КАК Реквизиты
	|	ПО ОсмотрТСРезультаты.Ссылка = Реквизиты.Ссылка И ОсмотрТСРезультаты.Комментарий <> """"
	|;
	|ВЫБРАТЬ МАКСИМУМ(ОсмотрТС.Дата) КАК КрайняяДата	//3
	|ПОМЕСТИТЬ ОсмотрыТСКрайние
	|ИЗ
	|	Документ.ОсмотрТС КАК ОсмотрТС
	|ГДЕ
	|	ОсмотрТС.Возврат И ОсмотрТС.ТС.ГаражныйНомер = &ГарНомер И НЕ ОсмотрТС.ПометкаУдаления
	|;
	|ВЫБРАТЬ ОсмотрТС.Пробег КАК Пробег,	//4
	|ОсмотрТС.ОстатокВБаке
	|ИЗ
	|	Документ.ОсмотрТС КАК ОсмотрТС внутреннее соединение ОсмотрыТСКрайние КАК ОсмотрыТСКрайние ПО ОсмотрыТСКрайние.КрайняяДата = ОсмотрТС.Дата
	|ГДЕ
	|	ОсмотрТС.ТС.ГаражныйНомер = &ГарНомер И НЕ ОсмотрТС.ПометкаУдаления");
	мЗапрос.УстановитьПараметр("ГарНомер", мСтруктура.пГарНомер);
	мЗапрос.УстановитьПараметр("НомерПЛ", мСтруктура.пНомерПЛ);
	
	мРезультатПакет = мЗапрос.ВыполнитьПакет();
	мРезультатДанныеКрайнегоОсмотра = мРезультатПакет[1].Выбрать();
	мРезультатКомментарии = мРезультатПакет[2].Выбрать();
	мРезультатПробег = мРезультатПакет[4].Выбрать();
	
	мСтруктураВозврата = Новый Структура("Дата, Возврат, Пробег", Дата("00010101"), Ложь, 0);
	мСоответствиеКомментариевКритериям = Новый Соответствие();
	мСоответствиеДатВводаКритериям = Новый Соответствие();
	
	Если мРезультатДанныеКрайнегоОсмотра.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мСтруктураВозврата, мРезультатДанныеКрайнегоОсмотра);
	КонецЕсли;
	Если мРезультатПробег.Следующий() Тогда
		мСтруктураВозврата.Вставить("Пробег", мРезультатПробег.Пробег);
		мСтруктураВозврата.Вставить("ОстатокВБаке", мРезультатПробег.ОстатокВБаке);
	КонецЕсли;
	
	Пока мРезультатКомментарии.Следующий() Цикл
		мСоответствиеКомментариевКритериям.Вставить(мРезультатКомментарии.Критерий.УникальныйИдентификатор(), мРезультатКомментарии.Комментарий);
		мСоответствиеДатВводаКритериям.Вставить(мРезультатКомментарии.Критерий.УникальныйИдентификатор(), мРезультатКомментарии.ДатаВвода);
	КонецЦикла;
	
	мФиксированноеСоответствиеКомментариевКритериям = Новый ФиксированноеСоответствие(мСоответствиеКомментариевКритериям);
	мФиксированноеСоответствиеДатВводаКритериям = Новый ФиксированноеСоответствие(мСоответствиеДатВводаКритериям);
	мСтруктураВозврата.Вставить("СоответствиеКомментариевКритериям", мФиксированноеСоответствиеКомментариевКритериям);
	мСтруктураВозврата.Вставить("СоответствиеДатВводаКритериям", мФиксированноеСоответствиеДатВводаКритериям);
	мХранилище = Новый ХранилищеЗначения(мСтруктураВозврата, Новый СжатиеДанных(5));
	Возврат XMLСтрока(мХранилище);
КонецФункции

Функция ПолучитьДанныеБСМТС(пДанные, КодСостояния) Экспорт
	мСтруктура = XMLЗначение(Тип("ХранилищеЗначения"), пДанные).Получить();
	Если ТипЗнч(мСтруктура) <> Тип("Структура") Тогда
		КодСостояния = 308;
		Возврат "Неправильный тип данных при передаче";
	КонецЕсли;
	
	мТранспортноеСредство = НайтиЗапросомСправочникПоРеквизиту("уатТС", "ГаражныйНомер", мСтруктура.ГарНомер);
	Если Не ЗначениеЗаполнено(мТранспортноеСредство) Тогда
		КодСостояния = 505;
		Возврат "ТС отсутствуент в БД";
	КонецЕсли;
	ТекстОшибки = "";
	мДанныеИзСистемыМониторинга = глСистемыМониторингаСервер.ПолучитьДанныеПоТС(мТранспортноеСредство, мСтруктура.ДатаНачала, мСтруктура.ДатаОкончания, , ,ТекстОшибки);
	мОбъемОсновногоБака = 0;
	мОстатокТопливаВБаке = 0;
	мДатаАктуальности = Дата("00010101");
	Если мДанныеИзСистемыМониторинга <> Неопределено И мДанныеИзСистемыМониторинга <> 1 Тогда
		мОстатокТопливаВБаке = мДанныеИзСистемыМониторинга.Бак1Кон;
		мОбъемОсновногоБака = мТранспортноеСредство.ОбъемБака;	//ЕмкостьБакаТС
	КонецЕсли;
	мДатаАктуальности = глСистемыМониторингаСервер.ПолучитьДатуАктуальностиПоТС(мТранспортноеСредство, ТекстОшибки);
	мСтруктураВозврата = Новый Структура("ИдентификаторБСМТСЗаполнен, ОстатокТопливаВБаке, ДатаАктуальности, ЕмкостьБакаТС", ЗначениеЗаполнено(мТранспортноеСредство.СистемаМониторинга), мОстатокТопливаВБаке, мДатаАктуальности, мОбъемОсновногоБака);
	мХранилище = Новый ХранилищеЗначения(мСтруктураВозврата, Новый СжатиеДанных(5));
	Возврат XMLСтрока(мХранилище);
КонецФункции

Функция ЗагрузитьДокумент(СтрДД,КодСостояния) Экспорт
	
	Стк = XMLЗначение(Тип("ХранилищеЗначения"),СтрДД).Получить();
	Если ТипЗнч(Стк)<>Тип("Структура") Тогда
		КодСостояния = 308;
		Возврат "Неправильный тип данных при передаче";
	КонецЕсли;
	
	
	сс = Документы[Стк.ВидДок].ПолучитьСсылку(Стк.GUID);
	Если НАйти(СокрЛ(сс),"Объект не найден")<>0 Тогда
		ОБк = Документы[Стк.ВидДок].СоздатьДокумент();
		Обк.УстановитьСсылкуНового(сс);
	Иначе	
		Обк = сс.ПолучитьОбъект();
	КонецеслИ;
	
	
	ЗаполнитьЗначенияСвойств(Обк,Стк);
	
	Для каждого клЗн из Стк Цикл
		Если Найти(клЗн.ключ,"GUID") = 0 Тогда
			Если Найти(клЗн.ключ, "_REFERENCE") <> 0 Тогда
				
				// разбор полей вида "Водитель_REFERENCEуатСотрудникиVКод", "Организация_REFERENCEОрганизацииVИНН" - поле Организация содержит значение
				//	справочника Организации, которое следует найти через ИНН (клЗн.Значение = ИНН)
				
				ИмяСправочникаВладельца = Прав(клЗн.ключ, СтрДлина(клЗн.ключ) - СтрНайти(клЗн.ключ, "_REFERENCE") - СтрДлина("_REFERENCE") + 1);
				мИмяПоля = Лев(клЗн.ключ, СтрНайти(клЗн.ключ, "_REFERENCE") - 1);
				мИмяСправочникаДляПоиска = Лев(ИмяСправочникаВладельца, СтрНайти(ИмяСправочникаВладельца, "V") - 1);
				мРеквизитПоиска = Сред(клЗн.ключ, СтрНайти(клЗн.ключ, "V") + 1);
				мЗначениеРеквизитаПоиска = клЗн.Значение;
				//Обк[мИмяПоля] = Справочники[мИмяСправочникаДляПоиска].НайтиПоРеквизиту(мРеквизитПоиска, мЗначениеРеквизитаПоиска);
				Обк[мИмяПоля] = НайтиЗапросомСправочникПоРеквизиту(мИмяСправочникаДляПоиска, мРеквизитПоиска, мЗначениеРеквизитаПоиска);
				Продолжить;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Рек = СокрЛП(СтрЗаменить(клЗн.ключ, "GUID", ""));
		Если Рек = "" Тогда
			Продолжить;
		КонецЕсли;
		
		п = XMLТипЗнч(Обк[Рек]).TypeName;
		пТипСпр = Сред(п, Найти(п, ".") + 1);
		Обк[Рек] = Справочники[пТипСпр].ПолучитьСсылку(клЗн.Значение);
	КонецЦикла;
	
	Для каждого клЗн из Стк Цикл
		Если Лев(клЗн.Ключ, 8) = "Таблица_" Тогда
			ЗагрузитьТаблицу(Обк[Сред(клЗН.Ключ, 9)], клЗн.Значение);
		КонецЕсли;
	Конеццикла;
	
	Документы[Стк.ВидДок].ЗаполнитьРеквизитыПоУмолчанию(Обк);
	
	//Если Стк.ВидДок = "ПоступлениеТоваровУслуг" Тогда
	//	Обк.ВидОперации 		 = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	//	Для каждого Стр из Обк.ТОвары Цикл
	//		Стр.ЕдиницаИзмерения = Стр.Номенклатура.БазоваяЕдиницаИзмерения;
	//		Стр.Коэффициент = 1;
	//		Стр.СчетУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(Обк.Организация, Стр.Номенклатура).СчетУчета;
	//		Если ЗначениеЗаполнено(Стр.счетУчета)=ЛОжь Тогда
	//			Стр.счетУчета = ПланыСчетов.Хозрасчетный.ЗапасныеЧасти;
	//		КонецеслИ;
	//		Стр.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
	//	Конеццикла;
	//	Обк.СпособЗачетаАвансов	 = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	//	Обк.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
	//ИНачеЕсли Стк.ВидДок = "РеализацияТоваровУслуг" Тогда
	//	Обк.ВидОперации 		 = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
	//	Обк.СуммаВключаетНДС 	 = Ложь;
	//	Обк.УчитыватьНДС	 	 = Истина;
	//	Обк.СпособЗачетаАвансов	 = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
	//	
	//	Обк.СчетУчетаРасчетовПоАвансам 		= ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;
	//	Обк.СчетУчетаРасчетовСКонтрагентом 	= ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;
	//ИНачеЕсли Стк.ВидДок = "ПеремещениеТоваров" Тогда
	//    Обк.ВидОперации 	 = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
	//	Обк.СкладОтправитель = Справочники.Склады.ПолучитьСсылку(Стк.СкладОтправительГУИД);
	//КонецЕсли;
	
	Если Стк.свойство("ИННКонтрагентаДляПоиска") Тогда
		Обк.Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",Стк.ИННКонтрагентаДляПоиска);
		Если Стк.свойство("НомерДоговораДляПоиска") и ЗначениеЗаполнено(Обк.Контрагент) Тогда
			Обк.ДоговорКонтрагента = НайтиДоговорПоНомеру(Обк.Контрагент,Стк.НомерДоговораДляПоиска);
		ИНачеЕсли ЗначениеЗаполнено(Обк.ДоговорКонтрагента) = Ложь Тогда
			Обк.ДоговорКонтрагента = Обк.Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Обк.ДоговорКонтрагента) Тогда
			Обк.ВалютаДокумента = Обк.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецеСЛИ;
	КонецЕсли;
	
	//Если Стк.ВидДок = "РеализацияТоваровУслуг" Тогда
	//	ДозаполнитьТабЧастьСписание(Обк.Склад,Обк.Товары,Обк.Дата,Стк.ВидДок);
	//ИначеЕсли Стк.ВидДок = "ПеремещениеТоваров" Тогда
	//	ДозаполнитьТабЧастьСписание(Обк.СкладОтправитель,Обк.Товары,Обк.Дата,Стк.ВидДок);
	//ИначеЕсли Стк.ВидДок = "ПоступлениеТоваровУслуг" Тогда
	//	ДозаполнитьТабЧастьПоступление(Обк);
	//КонецЕСЛИ;
	
	//Обк.ПолучитьФорму("ФормаДокумента").Открыть();
	
	Попытка
		Обк.Записать();
	исключение
		КодСостояния = 318;
		Возврат ОписаниеОшибки();
	КонецПОпытки;
	Попытка
		Обк.Записать(РежимЗаписиДокумента.Проведение);
	исключение
	КонецПОпытки;
	
	Если Стк.ВидДок = "РеализацияТоваровУслуг" Тогда
		масФон = Новый Массив;
		масФон.Добавить(Обк.ссылка);
		Если Стк.свойство("СкладПриемникГУИД") Тогда
			масФон.Добавить(Стк.СкладПриемникГУИД);
		КонецЕсли;
		ФоновыеЗадания.Выполнить("глСервер.ВыгрузитьДокументРеализацияПокупателю", масФон);
	КонецЕсли;
	
	Возврат "Документ загружен!";
	
КонецФункции

Процедура ЗагрузитьТаблицу(ОбкТаб,Тбл) Экспорт
	
	масКолGUID = Новый Массив;
	Для каждого Кол из Тбл.Колонки Цикл
		Если Найти(Кол.Имя,"GUID")=0 Тогда Продолжить; КонецЕсли;
		масКолGUID.Добавить(Кол.Имя);
	Конеццикла;
	
	ОбкТаб.Очистить();
	Для каждого Стр из Тбл Цикл
		НовСтр = ОбкТаб.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,Стр);
		Для каждого КлЗн из масКолGUID Цикл
			Рек = СокрЛП(СтрЗаменить(клЗн,"GUID",""));
			Если Рек = "" Тогда Продолжить; КонецЕСЛИ;
			
			п = XMLТипЗнч(НовСтр[Рек]).TypeName; 
			пТипСпр = Сред(п,Найти(п,".") + 1);
			//ЗаписьЖурналаРегистрации("Обработка ТЧ: " + пТипСпр + ";" + Стр[клЗн]);
			НовСтр[Рек] = Справочники[пТипСпр].ПолучитьСсылку(Стр[клЗн]);
		Конеццикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиДоговорПоНомеру(КА,Номер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоговорыКонтрагентов.Ссылка
	               |ИЗ
	               |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	               |ГДЕ
	               |	ДоговорыКонтрагентов.Владелец = &Владелец
	               |	И ДоговорыКонтрагентов.Номер = &Номер";
	Запрос.УстановитьПараметр("Владелец",КА);
	Запрос.УстановитьПараметр("Номер",Номер);
	
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() ТОгда
		Возврат Выб.ссылка;
	ИНАче
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
#КонецОбласти

#Область РазнарядкаДоступ
Функция СформироватьКРТРТО(пТело) Экспорт
	мСтруктураПараметров = XMLЗначение(Тип("ХранилищеЗначения"), пТело).Получить();
	Если ТипЗнч(мСтруктураПараметров) <> Тип("Структура") Или
		НЕ (мСтруктураПараметров.Свойство("ГарНомер") И мСтруктураПараметров.Свойство("ДатаНачала") И мСтруктураПараметров.Свойство("ДатаОкончания")) Тогда
		Возврат "Отсутствует ожидаемая структура с
		|параметрами в теле запроса: Новый Структура(""ГарНомер"", ""ДатаНачала"", ""ДатаОкончания"")";
	КонецЕсли;
	мГарНомер = мСтруктураПараметров.ГарНомер;
	мДатаНачала = мСтруктураПараметров.ДатаНачала;
	мДатаОкончания = мСтруктураПараметров.ДатаОкончания;
	мТабличныйДокумент = КомандаСформироватьСКДНаСервере("уатТС", "Макет_СКД_ТРКРИТО", мГарНомер, мДатаНачала, мДатаОкончания, Новый Структура, , );
	мХранилище = Новый ХранилищеЗначения(мТабличныйДокумент, Новый СжатиеДанных(5));
	Возврат XMLСтрока(мХранилище);
КонецФункции

Функция КомандаСформироватьСКДНаСервере(пИмяСправочника, пИмяМакетаСКД, пГарНомер, пДатаНачала, пДатаОкончания, пДополнительныеПараметры = Неопределено, пАдресДанныхРасшифровки = Неопределено, пУИДФормы) Экспорт
	мДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	мМакетСКД = Справочники[пИмяСправочника].ПолучитьМакет(пИмяМакетаСКД);
	мТабличныйДокумент = Новый ТабличныйДокумент;
	мТабличныйДокумент.АвтоМасштаб = Истина;
	мТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	КомпоновщикНастроекДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(мМакетСКД));
	КомпоновщикНастроекДанных.ЗагрузитьНастройки(мМакетСКД.НастройкиПоУмолчанию);
	
	мМассивЭлементовПараметровДанных = КомпоновщикНастроекДанных.Настройки.ПараметрыДанных.Элементы;
	мЭлементНачалоПериода = мМассивЭлементовПараметровДанных.Найти("ДатаНачала");
	мЭлементНачалоПериода.Использование = Истина;
	мЭлементНачалоПериода.Значение = пДатаНачала;
	
	мЭлементКонецПериода = мМассивЭлементовПараметровДанных.Найти("ДатаОкончания");
	мЭлементКонецПериода.Использование = Истина;
	мЭлементКонецПериода.Значение = пДатаОкончания;
	
	мЭлементТС = мМассивЭлементовПараметровДанных.Найти("ГарНомер");
	мЭлементТС.Использование = Истина;
	мЭлементТС.Значение = пГарНомер;
	
	Для Каждого мПараметр Из пДополнительныеПараметры Цикл
		мЭлемент = мМассивЭлементовПараметровДанных.Найти(мПараметр.Ключ);
		Если мЭлемент <> Неопределено Тогда
			мЭлемент.Использование = Истина;
			мЭлемент.Значение = мПараметр.Значение;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	мСкомпонованныйМакет = КомпоновщикМакетаОСКД.Выполнить(мМакетСКД, КомпоновщикНастроекДанных.ПолучитьНастройки(), мДанныеРасшифровки);
	
	мПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	мПроцессорКомпоновки.Инициализировать(мСкомпонованныйМакет, , мДанныеРасшифровки);
	мТабличныйДокумент.Очистить();
	
	мПроцессорВыводаОСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	мПроцессорВыводаОСКД.УстановитьДокумент(мТабличныйДокумент);
	
	
	Если пАдресДанныхРасшифровки <> Неопределено Тогда
		пАдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(мДанныеРасшифровки, пУИДФормы);
	КонецЕсли;
	мПроцессорВыводаОСКД.НачатьВывод();
	
	Пока Истина Цикл
	    мЭлементРезультата = мПроцессорКомпоновки.Следующий();
	    Если мЭлементРезультата = Неопределено Тогда
	        Прервать;
	    Иначе
	        мПроцессорВыводаОСКД.ВывестиЭлемент(мЭлементРезультата);
	    КонецЕсли;
	КонецЦикла;
	мПроцессорВыводаОСКД.ЗакончитьВывод();
	
	Возврат мТабличныйДокумент;
КонецФункции

Функция СформироватьСтатистикуПоТС(пТело) Экспорт
	мСтруктураПараметров = XMLЗначение(Тип("ХранилищеЗначения"), пТело).Получить();
	Если ТипЗнч(мСтруктураПараметров) <> Тип("Структура") Или
		НЕ (мСтруктураПараметров.Свойство("ГарНомер") И мСтруктураПараметров.Свойство("ДатаНачала") И мСтруктураПараметров.Свойство("ДатаОкончания")) Тогда
		Возврат "Отсутствует ожидаемая структура с
		|параметрами в теле запроса: Новый Структура(""ГарНомер"", ""ДатаНачала"", ""ДатаОкончания"")";
	КонецЕсли;
	мГарНомер = мСтруктураПараметров.ГарНомер;
	мДатаНачала = мСтруктураПараметров.ДатаНачала;
	мДатаОкончания = мСтруктураПараметров.ДатаОкончания;
	мТабличныйДокумент = КомандаСформироватьСКДНаСервере("уатТС", "Макет_СКД_СтатистикаРаботыТС", мГарНомер, мДатаНачала, мДатаОкончания, Новый Структура, , );
	мХранилище = Новый ХранилищеЗначения(мТабличныйДокумент, Новый СжатиеДанных(5));
	Возврат XMLСтрока(мХранилище);
КонецФункции

Функция ПолучитьДанныеВыполнениеПП(пТело, пПараметрыАдреснойСтроки) Экспорт
	Если пПараметрыАдреснойСтроки.Свойство("Date") Тогда
		мДатаЗапроса = Дата(пПараметрыАдреснойСтроки.Date);
	Иначе
		мДатаЗапроса = XMLЗначение(Тип("Дата"), пТело);
	КонецЕсли;
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	уатПутевойЛист.Ссылка КАК ссылка,
	|	уатПутевойЛист.ТранспортноеСредство КАК ТС,
	|	уатПутевойЛист.Ссылка КАК ПутевойЛист,
	|	уатПутевойЛист.Номер КАК Номер,
	|	уатПутевойЛист.ДатаВыезда КАК ДатаВыезда,
	|	уатПутевойЛист.ДатаВозвращения КАК ДатаВозвращения
	|ПОМЕСТИТЬ часыпопутевымлистам
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(КОНЕЦПЕРИОДА(&МЕСЯЦ, МЕСЯЦ), ) КАК Колонны
	|		ПО (Колонны.ТС = уатПутевойЛист.ТранспортноеСредство)
	|ГДЕ
	|	уатПутевойЛист.ДатаВыезда МЕЖДУ НАЧАЛОПЕРИОДА(&МЕСЯЦ, МЕСЯЦ) И КОНЕЦПЕРИОДА(&МЕСЯЦ, МЕСЯЦ)
	|	И уатПутевойЛист.ПометкаУдаления = ЛОЖЬ
	|	И ВЫРАЗИТЬ(Колонны.Владелец КАК Справочник.Контрагенты) ЕСТЬ NULL
	|	И НЕ Колонны.Подразделение.Наименование ПОДОБНО ""%м/р%""
	|	И НЕ Колонны.Подразделение.Наименование ПОДОБНО ""%р-н%""
	|	И НЕ Колонны.Подразделение.Наименование ПОДОБНО ""%г.%""
	|	И НЕ Колонны.Подразделение.Наименование ПОДОБНО ""%к.%""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОшибкиБСМТС.ПутЛист КАК ПутевойЛист
	|ПОМЕСТИТЬ ДанныеБСМТС
	|ИЗ
	|	РегистрСведений.ОшибкиБСМТС КАК ОшибкиБСМТС
	|ГДЕ
	|	ОшибкиБСМТС.ПутЛист.ДатаВыезда МЕЖДУ НАЧАЛОПЕРИОДА(&МЕСЯЦ, МЕСЯЦ) И КОНЕЦПЕРИОДА(&МЕСЯЦ, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	часыпопутевымлистам.ссылка КАК ссылка
	|ПОМЕСТИТЬ бракпоБСМТС
	|ИЗ
	|	ДанныеБСМТС КАК ДанныеБСМТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ часыпопутевымлистам КАК часыпопутевымлистам
	|		ПО (часыпопутевымлистам.ссылка = ДанныеБСМТС.ПутевойЛист)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатРемонтныйЛист.Ссылка КАК Ссылка,
	|	уатРемонтныйЛист.ДатаНачала КАК ДатаНачала,
	|	уатРемонтныйЛист.ТС КАК ТС,
	|	ВЫБОР
	|		КОГДА уатРемонтныйЛист.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(3000, 1, 1)
	|		ИНАЧЕ уатРемонтныйЛист.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания
	|ПОМЕСТИТЬ ремонтызапериод
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|ГДЕ
	|	(уатРемонтныйЛист.ДатаНачала МЕЖДУ НАЧАЛОПЕРИОДА(&МЕСЯЦ, МЕСЯЦ) И КОНЕЦПЕРИОДА(&МЕСЯЦ, МЕСЯЦ)
	|			ИЛИ уатРемонтныйЛист.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатРемонтныйЛист.ДатаОкончания МЕЖДУ НАЧАЛОПЕРИОДА(&МЕСЯЦ, МЕСЯЦ) И КОНЕЦПЕРИОДА(&МЕСЯЦ, МЕСЯЦ))
	|	И уатРемонтныйЛист.ПометкаУдаления = ЛОЖЬ
	|	И уатРемонтныйЛист.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	часыпопутевымлистам.ссылка КАК путевойлист,
	|	ремонтызапериод.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ремонтызапериод.ДатаНачала МЕЖДУ часыпопутевымлистам.ДатаВыезда И часыпопутевымлистам.ДатаВозвращения
	|				И (ремонтызапериод.ДатаОкончания МЕЖДУ часыпопутевымлистам.ДатаВыезда И часыпопутевымлистам.ДатаВозвращения)
	|			ТОГДА РАЗНОСТЬДАТ(ремонтызапериод.ДатаНачала, ремонтызапериод.ДатаОкончания, ЧАС)
	|		ИНАЧЕ РАЗНОСТЬДАТ(ВЫБОР
	|					КОГДА ремонтызапериод.ДатаНачала <= часыпопутевымлистам.ДатаВыезда
	|						ТОГДА часыпопутевымлистам.ДатаВыезда
	|					ИНАЧЕ ремонтызапериод.ДатаНачала
	|				КОНЕЦ, ВЫБОР
	|					КОГДА ремонтызапериод.ДатаОкончания >= часыпопутевымлистам.ДатаВозвращения
	|						ТОГДА часыпопутевымлистам.ДатаВозвращения
	|					ИНАЧЕ ремонтызапериод.ДатаОкончания
	|				КОНЕЦ, ЧАС)
	|	КОНЕЦ КАК ЧасовБрак
	|ПОМЕСТИТЬ бракчасовпоремонтам
	|ИЗ
	|	часыпопутевымлистам КАК часыпопутевымлистам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ремонтызапериод КАК ремонтызапериод
	|		ПО (часыпопутевымлистам.ДатаВыезда МЕЖДУ ремонтызапериод.ДатаНачала И ремонтызапериод.ДатаОкончания
	|				ИЛИ часыпопутевымлистам.ДатаВозвращения МЕЖДУ ремонтызапериод.ДатаНачала И ремонтызапериод.ДатаОкончания
	|				ИЛИ ремонтызапериод.ДатаНачала МЕЖДУ часыпопутевымлистам.ДатаВыезда И часыпопутевымлистам.ДатаВозвращения
	|					И (ремонтызапериод.ДатаОкончания МЕЖДУ часыпопутевымлистам.ДатаВыезда И часыпопутевымлистам.ДатаВозвращения))
	|			И (ремонтызапериод.ТС = часыпопутевымлистам.ТС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	часыпопутевымлистам.ТС КАК ТС,
	|	часыпопутевымлистам.ссылка КАК ПутевойЛист
	|ПОМЕСТИТЬ бракПЛпоДоступу
	|ИЗ
	|	часыпопутевымлистам КАК часыпопутевымлистам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОсмотрТС КАК ОсмотрТС
	|		ПО часыпопутевымлистам.Номер = ОсмотрТС.НомерПЛ
	|			И (НАЧАЛОПЕРИОДА(часыпопутевымлистам.ДатаВыезда, ДЕНЬ) = НАЧАЛОПЕРИОДА(ОсмотрТС.Дата, ДЕНЬ))
	|ГДЕ
	|	ЕСТЬNULL(ОсмотрТС.Возврат, ЛОЖЬ) = ЛОЖЬ
	|	И ЕСТЬNULL(ОсмотрТС.ПометкаУдаления, ЛОЖЬ) = ЛОЖЬ
	|	И ОсмотрТС.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛотыПроизводственнойПрограммы.МесяцЛота КАК Месяцлота,
	|	ЛотыПроизводственнойПрограммы.Идентификатор КАК Идентификатор,
	|	ЛотыПроизводственнойПрограммы.ДокументЛота КАК ДокументЛота
	|ПОМЕСТИТЬ ОтсторнированныеДокументыПервыйПериод
	|ИЗ
	|	РегистрНакопления.ЛотыПроизводственнойПрограммы КАК ЛотыПроизводственнойПрограммы
	|ГДЕ
	|	ЛотыПроизводственнойПрограммы.ДокументЛота <> ЗНАЧЕНИЕ(Документ.юкЛот.ПустаяСсылка)
	|	И ЛотыПроизводственнойПрограммы.ДокументЛота <> ЛотыПроизводственнойПрограммы.Регистратор
	|	И НАЧАЛОПЕРИОДА(ЛотыПроизводственнойПрограммы.МесяцЛота, ГОД) = НАЧАЛОПЕРИОДА(&МЕСЯЦ, ГОД)
	|	И НАЧАЛОПЕРИОДА(ЛотыПроизводственнойПрограммы.Период, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&МЕСЯЦ, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛотыПроизводственнойПрограммыОбороты.Идентификатор КАК Идентификатор,
	|	ЛотыПроизводственнойПрограммы.МесяцЛота КАК МесяцЛота,
	|	ЛотыПроизводственнойПрограммы.ДокументЛота КАК ДокументЛота,
	|	СУММА(ЛотыПроизводственнойПрограммыОбороты.СуммаЧасыОборот) КАК СуммаЧасыОборот,
	|	СУММА(ЛотыПроизводственнойПрограммыОбороты.СуммаУслугиОборот) КАК СуммаУслугиОборот,
	|	СУММА(ЛотыПроизводственнойПрограммыОбороты.СуммаПробегОборот) КАК СуммаПробегОборот,
	|	СУММА(ЛотыПроизводственнойПрограммы.ДнейВРаботеЗаСмену) КАК ДнейВРаботеЗаСмену
	|ПОМЕСТИТЬ ОстаткиСИдентификаторамиПервыйПериод
	|ИЗ
	|	РегистрНакопления.ЛотыПроизводственнойПрограммы.Обороты(НАЧАЛОПЕРИОДА(&МЕСЯЦ, ГОД), КОНЕЦПЕРИОДА(&МЕСЯЦ, ГОД), , ) КАК ЛотыПроизводственнойПрограммыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЛотыПроизводственнойПрограммы КАК ЛотыПроизводственнойПрограммы
	|		ПО ЛотыПроизводственнойПрограммыОбороты.Идентификатор = ЛотыПроизводственнойПрограммы.Идентификатор
	|			И ЛотыПроизводственнойПрограммыОбороты.МесяцЛота = ЛотыПроизводственнойПрограммы.МесяцЛота
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтсторнированныеДокументыПервыйПериод КАК ОтсторнированныеДокументы
	|		ПО (ЛотыПроизводственнойПрограммы.МесяцЛота = ОтсторнированныеДокументы.Месяцлота)
	|			И (ЛотыПроизводственнойПрограммы.Идентификатор = ОтсторнированныеДокументы.Идентификатор)
	|			И (НАЧАЛОПЕРИОДА(ЛотыПроизводственнойПрограммы.МесяцЛота, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МЕСЯЦ, МЕСЯЦ))
	|			И (НАЧАЛОПЕРИОДА(ЛотыПроизводственнойПрограммы.Период, МЕСЯЦ) <= НАЧАЛОПЕРИОДА(&МЕСЯЦ, МЕСЯЦ))
	|			И (ЛотыПроизводственнойПрограммы.Регистратор = ОтсторнированныеДокументы.ДокументЛота)
	|ГДЕ
	|	ОтсторнированныеДокументы.ДокументЛота ЕСТЬ NULL
	|	И НАЧАЛОПЕРИОДА(ЛотыПроизводственнойПрограммы.МесяцЛота, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&МЕСЯЦ, МЕСЯЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛотыПроизводственнойПрограммыОбороты.Идентификатор,
	|	ЛотыПроизводственнойПрограммы.МесяцЛота,
	|	ЛотыПроизводственнойПрограммы.ДокументЛота
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЛотыПроизводственнойПрограммы.ДнейВРаботеЗаСмену) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РеестрыУслуг.ПутевойЛист.ДатаВыезда, МЕСЯЦ) КАК Период,
	|	РеестрыУслуг.Контрагент КАК Контрагент,
	|	РеестрыУслуг.ТС КАК ТС,
	|	СУММА(РеестрыУслуг.Сумма + РеестрыУслуг.СуммаКм + РеестрыУслуг.Сумма1 + РеестрыУслуг.Сумма2 + РеестрыУслуг.Сумма3 + РеестрыУслуг.Сумма4 + РеестрыУслуг.Сумма5 + РеестрыУслуг.Сумма6) КАК СуммаВсего,
	|	СУММА(РеестрыУслуг.СуммаСуб) КАК СуммаСуб,
	|	МАКСИМУМ(РеестрыУслуг.Услуга1) КАК Услуга1,
	|	МАКСИМУМ(РеестрыУслуг.Услуга2) КАК Услуга2,
	|	МАКСИМУМ(РеестрыУслуг.Услуга3) КАК Услуга3,
	|	СУММА(РеестрыУслуг.Количество1) КАК Количество1,
	|	СУММА(РеестрыУслуг.Количество2) КАК Количество2,
	|	СУММА(РеестрыУслуг.Количество3) КАК Количество3,
	|	СУММА(РеестрыУслуг.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА РеестрыУслуг.СуммаКм > 1
	|				ТОГДА РеестрыУслуг.КоличествоКм
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоКм,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ бракПЛпоДоступу.ПутевойЛист ЕСТЬ NULL
	|				ТОГДА РеестрыУслуг.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК часыбракподоступу,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ бракПЛпоДоступу.ПутевойЛист ЕСТЬ NULL
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Количествобракподоступу,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ бракчасовпоремонтам.ПутевойЛист ЕСТЬ NULL
	|				ТОГДА бракчасовпоремонтам.ЧасовБрак
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК бракчасовпоремонтам,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ бракчасовпоремонтам.ПутевойЛист ЕСТЬ NULL
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК бракКоличествопоремонтам,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ бракпоБСМТС.ссылка ЕСТЬ NULL
	|				ТОГДА РеестрыУслуг.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК бракчасовпоБСМТС,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ бракпоБСМТС.ссылка ЕСТЬ NULL
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК бракКоличествопоБСМТС
	|ПОМЕСТИТЬ РеестрУслугСгруппированныйПоПутевымЛистамПервыйПериод
	|ИЗ
	|	РегистрНакопления.РеестрыУслуг КАК РеестрыУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ бракПЛпоДоступу КАК бракПЛпоДоступу
	|		ПО (бракПЛпоДоступу.ПутевойЛист = РеестрыУслуг.ПутевойЛист)
	|		ЛЕВОЕ СОЕДИНЕНИЕ бракчасовпоремонтам КАК бракчасовпоремонтам
	|		ПО (бракчасовпоремонтам.путевойлист = РеестрыУслуг.ПутевойЛист)
	|		ЛЕВОЕ СОЕДИНЕНИЕ бракпоБСМТС КАК бракпоБСМТС
	|		ПО (бракпоБСМТС.ссылка = РеестрыУслуг.ПутевойЛист)
	|ГДЕ
	|	РеестрыУслуг.ПутевойЛист.ДатаВыезда МЕЖДУ НАЧАЛОПЕРИОДА(&МЕСЯЦ, МЕСЯЦ) И КОНЕЦПЕРИОДА(&МЕСЯЦ, МЕСЯЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(РеестрыУслуг.ПутевойЛист.ДатаВыезда, МЕСЯЦ),
	|	РеестрыУслуг.Контрагент,
	|	РеестрыУслуг.ТС,
	|	РеестрыУслуг.ПутевойЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрыУслуг.Период КАК Месяц,
	|	РеестрыУслуг.Контрагент КАК Контрагент,
	|	РеестрыУслуг.ТС КАК ТС,
	|	СУММА(РеестрыУслуг.Количество + ВЫБОР
	|			КОГДА РеестрыУслуг.Услуга1.НаименованиеКолонкиДляОтчетовПП = ""часы""
	|				ТОГДА РеестрыУслуг.Количество1
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА РеестрыУслуг.Услуга2.НаименованиеКолонкиДляОтчетовПП = ""часы""
	|				ТОГДА РеестрыУслуг.Количество2
	|			ИНАЧЕ 0
	|		КОНЕЦ + ВЫБОР
	|			КОГДА РеестрыУслуг.Услуга3.НаименованиеКолонкиДляОтчетовПП = ""часы""
	|				ТОГДА РеестрыУслуг.Количество3
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЧасыВсего,
	|	СУММА(РеестрыУслуг.часыбракподоступу) КАК часыбракподоступу,
	|	СУММА(РеестрыУслуг.бракчасовпоремонтам) КАК бракчасовпоремонтам,
	|	СУММА(РеестрыУслуг.бракчасовпоБСМТС) КАК бракчасовпоБСМТС,
	|	СУММА(РеестрыУслуг.Количествобракподоступу) КАК Количествобракподоступу,
	|	СУММА(РеестрыУслуг.бракКоличествопоремонтам) КАК бракКоличествопоремонтам,
	|	СУММА(РеестрыУслуг.бракКоличествопоБСМТС) КАК бракКоличествопоБСМТС
	|ПОМЕСТИТЬ СуммыФактПоМесяцамПервыйПериод
	|ИЗ
	|	РеестрУслугСгруппированныйПоПутевымЛистамПервыйПериод КАК РеестрыУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	РеестрыУслуг.Период,
	|	РеестрыУслуг.Контрагент,
	|	РеестрыУслуг.ТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛотыПроизводственнойПрограммыОбороты.Идентификатор КАК Идентификатор,
	|	ЛотыПроизводственнойПрограммыОбороты.МесяцЛота КАК Месяц,
	|	ЛотыПроизводственнойПрограммы.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ЛотыПроизводственнойПрограммы.ДнейВРаботеЗаСмену > 0
	|				И ЛотыПроизводственнойПрограммы.КоличествоТС > 0
	|			ТОГДА (ЛотыПроизводственнойПрограммы.ЧасыРаботы + ВЫБОР
	|					КОГДА ЛотыПроизводственнойПрограммы.Номенклатура1.НаименованиеКолонкиДляОтчетовПП = ""часы""
	|						ТОГДА ЛотыПроизводственнойПрограммы.КоличествоУслуга1
	|					ИНАЧЕ 0
	|				КОНЕЦ + ВЫБОР
	|					КОГДА ЛотыПроизводственнойПрограммы.Номенклатура2.НаименованиеКолонкиДляОтчетовПП = ""часы""
	|						ТОГДА ЛотыПроизводственнойПрограммы.КоличествоУслуга2
	|					ИНАЧЕ 0
	|				КОНЕЦ + ВЫБОР
	|					КОГДА ЛотыПроизводственнойПрограммы.Номенклатура3.НаименованиеКолонкиДляОтчетовПП = ""часы""
	|						ТОГДА ЛотыПроизводственнойПрограммы.КоличествоУслуга3
	|					ИНАЧЕ 0
	|				КОНЕЦ) * ЛотыПроизводственнойПрограммы.Сменность * ЛотыПроизводственнойПрограммы.КоличествоТС * ЛотыПроизводственнойПрограммы.ДнейВРаботеЗаСмену
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧасовВсего
	|ПОМЕСТИТЬ СуммыПланПоМесяцамПредварительнаяПервыйПериод
	|ИЗ
	|	ОстаткиСИдентификаторамиПервыйПериод КАК ЛотыПроизводственнойПрограммыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЛотыПроизводственнойПрограммы КАК ЛотыПроизводственнойПрограммы
	|		ПО ЛотыПроизводственнойПрограммыОбороты.Идентификатор = ЛотыПроизводственнойПрограммы.Идентификатор
	|			И ЛотыПроизводственнойПрограммыОбороты.ДокументЛота = ЛотыПроизводственнойПрограммы.Регистратор
	|			И (НАЧАЛОПЕРИОДА(ЛотыПроизводственнойПрограммыОбороты.МесяцЛота, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ЛотыПроизводственнойПрограммы.МесяцЛота, МЕСЯЦ))
	|ГДЕ
	|	НЕ ЛотыПроизводственнойПрограммы.ДнейВРаботеЗаСмену ЕСТЬ NULL
	|	И ЛотыПроизводственнойПрограммы.ДнейВРаботеЗаСмену > 0
	|	И (ЛотыПроизводственнойПрограммыОбороты.СуммаЧасыОборот > 0
	|			ИЛИ ЛотыПроизводственнойПрограммыОбороты.СуммаУслугиОборот > 0
	|			ИЛИ ЛотыПроизводственнойПрограммыОбороты.СуммаПробегОборот > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыПлан.Контрагент КАК Контрагент,
	|	СуммыПлан.Месяц КАК Месяц,
	|	СУММА(СуммыПлан.ЧасовВсего) КАК КоличествоМашЧасовПлан,
	|	0 КАК КоличествоМашЧасовФакт,
	|	0 КАК часыбракподоступу,
	|	0 КАК бракчасовпоремонтам,
	|	0 КАК бракчасовпоБСМТС,
	|	0 КАК Количествобракподоступу,
	|	0 КАК бракКоличествопоремонтам,
	|	0 КАК бракКоличествопоБСМТС
	|ПОМЕСТИТЬ ПланФактПервыйПериод
	|ИЗ
	|	СуммыПланПоМесяцамПредварительнаяПервыйПериод КАК СуммыПлан
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммыПлан.Контрагент,
	|	СуммыПлан.Месяц
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СуммыФакт.Контрагент,
	|	СуммыФакт.Месяц,
	|	0,
	|	СУММА(СуммыФакт.ЧасыВсего),
	|	СУММА(СуммыФакт.часыбракподоступу),
	|	СУММА(СуммыФакт.бракчасовпоремонтам),
	|	СУММА(СуммыФакт.бракчасовпоБСМТС),
	|	СУММА(СуммыФакт.Количествобракподоступу),
	|	СУММА(СуммыФакт.бракКоличествопоремонтам),
	|	СУММА(СуммыФакт.бракКоличествопоБСМТС)
	|ИЗ
	|	СуммыФактПоМесяцамПервыйПериод КАК СуммыФакт
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммыФакт.Контрагент,
	|	СуммыФакт.Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланФактПервыйПериод.Контрагент.Наименование КАК Контрагент,
	|	СУММА(естьnull(ПланФактПервыйПериод.КоличествоМашЧасовПлан, 0)) КАК ЧасыПП,
	|	СУММА(естьnull(ПланФактПервыйПериод.КоличествоМашЧасовФакт, 0)) КАК ЧасыФакт,
	|	СУММА(естьnull(ПланФактПервыйПериод.часыбракподоступу, 0)) КАК ЧасыБракПоДоступу,
	|	СУММА(естьnull(ПланФактПервыйПериод.бракчасовпоремонтам, 0)) КАК ЧасыБракПоРемонту,
	|	СУММА(естьnull(ПланФактПервыйПериод.бракчасовпоБСМТС, 0)) КАК ЧасыБракПоБСМТС,
	|	СУММА(естьnull(ПланФактПервыйПериод.Количествобракподоступу, 0)) КАК КоличествоБракПоДоступу,
	|	СУММА(естьnull(ПланФактПервыйПериод.бракКоличествопоремонтам, 0)) КАК КоличествоБракПоРемонтам,
	|	СУММА(естьnull(ПланФактПервыйПериод.бракКоличествопоБСМТС, 0)) КАК КоличествоБракПоБСМТС,
	|	0 КАК БракРазличияРазнарядкаПЛ,
	|	0 КАК БракКоличествоРазличияРазнарядкаПЛ,
	|	0 БракЧасовНеподписано,
	|	0 КАК БракКоличествоНеподписано,
	|	0 КАК Коэффициент
	|ИЗ
	|	ПланФактПервыйПериод КАК ПланФактПервыйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланФактПервыйПериод.Контрагент,
	|	ПланФактПервыйПериод.Контрагент.Наименование
	|ИТОГИ
	|	СУММА(ЧасыПП),
	|	СУММА(ЧасыФакт),
	|	СУММА(ЧасыБракПоДоступу),
	|	СУММА(ЧасыБракПоРемонту),
	|	СУММА(ЧасыБракПоБСМТС),
	|	СУММА(БракРазличияРазнарядкаПЛ),
	|	СУММА(БракЧасовНеподписано),
	|	СУММА(КоличествоБракПоДоступу),
	|	СУММА(КоличествоБракПоРемонтам),
	|	СУММА(КоличествоБракПоБСМТС),
	|	СУММА(БракКоличествоРазличияРазнарядкаПЛ),
	|	СУММА(БракЧасовНеподписано),
	|	СУММА(БракКоличествоНеподписано),
	|	МАКСИМУМ(""ИТОГ"") КАК КОнтрагент, ВЫРАЗИТЬ((СУММА(ЧасыФакт) - СУММА(ЧасыБракПоДоступу) - СУММА(ЧасыБракПоРемонту) - СУММА(ЧасыБракПоБСМТС)) / СУММА(ЧасыПП) КАК ЧИСЛО(8, 4)) КАК Коэффициент
	|ПО
	|	ОБЩИЕ");
	
	мЗапрос.УстановитьПараметр("МЕСЯЦ", мДатаЗапроса);
	мПараметрыЗаписи = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	мЗаписьJSON = Новый ЗаписьJSON;
	мЗаписьJSON.УстановитьСтроку(мПараметрыЗаписи);
	мЗаписьJSON.ЗаписатьНачалоМассива();
	
	мСтрокаИмен = "Контрагент, ЧасыПП, ЧасыФакт, ЧасыБракПоДоступу, КоличествоБракПоДоступу, ЧасыБракПоРемонту, КоличествоБракПоРемонтам, ЧасыБракПоБСМТС, КоличествоБракПоБСМТС, БракРазличияРазнарядкаПЛ, БракКоличествоРазличияРазнарядкаПЛ, БракЧасовНеподписано, БракКоличествоНеподписано, Коэффициент";
	мСтрокаАнглийскихИмен = "Client, HoursPP, HoursFact, BadHoursAccess, CountHoursAccess, BadHoursMaintenance, BadCountMaintenance, BadHoursBSMTS, BadCountBSMTS, BadHoursDifference, BadCountDifference, BadHoursUnaccepted, BadCountUnaccepted, Coefficient";
	мСоответствие = СформироватьСоответствиеИменВыполнениеПП(мСтрокаИмен, мСтрокаАнглийскихИмен);
	мТаблицаРезультат = мЗапрос.Выполнить().Выгрузить();
	Для Каждого мСтрока Из мТаблицаРезультат Цикл
		мСтруктура = Новый Структура(мСтрокаИмен);
		ЗаполнитьЗначенияСвойств(мСтруктура, мСтрока);
		мСтруктураАнгл = Новый Структура;
		Для Каждого мПараКлючЗначение Из мСтруктура Цикл
			мСтруктураАнгл.Вставить(мСоответствие.Получить(мПараКлючЗначение.Ключ), мПараКлючЗначение.Значение);
		КонецЦикла;
		ЗаписатьJSON(мЗаписьJSON, мСтруктураАнгл);
	КонецЦикла;
	мЗаписьJSON.ЗаписатьКонецМассива();
	Возврат мЗаписьJSON.Закрыть();	
КонецФункции

Функция ПолучитьМакетИзВнешнихДанных(пИмя, пТип) Экспорт
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	рсш_ПОТОК_ВнешниеДанные.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.рсш_ПОТОК_ВнешниеДанные КАК рсш_ПОТОК_ВнешниеДанные
	|ГДЕ
	|	рсш_ПОТОК_ВнешниеДанные.ТипДанных = &Тип
	|	И рсш_ПОТОК_ВнешниеДанные.Наименование = &Имя");
	мЗапрос.УстановитьПараметр("Имя", пИмя);
	мЗапрос.УстановитьПараметр("Тип", пТип);
	мВыборка = мЗапрос.Выполнить().Выбрать();
	Если мВыборка.Следующий() Тогда
		мЭлементСправочникаВнешнихДанных = мВыборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	вМакет = Новый ТабличныйДокумент;
	мДвоичныеДанныеМакета = мЭлементСправочникаВнешнихДанных.ХранилищеДанных.Получить();
	мПоток = мДвоичныеДанныеМакета.ОткрытьПотокДляЧтения();
    вМакет.Прочитать(мПоток);
	Возврат вМакет;
КонецФункции

Функция СформироватьСоответствиеИменВыполнениеПП(пСтрокКлючей, пСтрокаЗначений)
	вСоответствие = Новый Соответствие;
	мМультиСтрокаКлючей = СтрЗаменить(пСтрокКлючей, ",", Символы.ПС);
	мМультиСтрокаЗначений = СтрЗаменить(пСтрокаЗначений, ",", Символы.ПС);
	Для Итр = 1 По СтрЧислоСтрок(мМультиСтрокаЗначений) Цикл
		вСоответствие.Вставить(СокрЛП(СтрПолучитьСтроку(мМультиСтрокаКлючей, Итр)), СокрЛП(СтрПолучитьСтроку(мМультиСтрокаЗначений, Итр)));
	КонецЦикла;
	
	Возврат вСоответствие;
КонецФункции
#КонецОбласти

#Область ПроектПрозрачность
Функция ПолучитьТЗСкановДоковТС() Экспорт
	Мас = Новый Массив;
	Мас.Добавить(Справочники.уатВидыДДД.ПТС);
	Мас.Добавить(Справочники.уатВидыДДД.СвидетельствоОРегистрацииТС);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатМестонахождениеТССрезПоследних.ТС КАК ТС
		|ПОМЕСТИТЬ ТСвЭкпл
		|ИЗ
		|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(
		|			&Дт,
		|			ТС.ДатаВводаВЭксплуатацию <> ДАТАВРЕМЯ(1, 1, 1)
		|				И ТС.ДатаВводаВЭксплуатацию <= &Дт
		|				И (ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
		|					ИЛИ ТС.ДатаВыбытия > &Дт)
		|				И (ТС.ТипТС.НеВыводитьВТабельТС = ЛОЖЬ
		|					ИЛИ ТС.ТипТС.НеВыводитьВТабельТС ЕСТЬ NULL)) КАК уатМестонахождениеТССрезПоследних
		|ГДЕ
		|	(уатМестонахождениеТССрезПоследних.Состояние.ЭтоПривленный = ЛОЖЬ
		|			ИЛИ уатМестонахождениеТССрезПоследних.Состояние.ЭтоПривленный ЕСТЬ NULL)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	уатМестонахождениеТС.ТС
		|ИЗ
		|	РегистрСведений.уатМестонахождениеТС КАК уатМестонахождениеТС
		|ГДЕ
		|	уатМестонахождениеТС.Период > &Дт
		|	И уатМестонахождениеТС.Период < &Дт
		|	И уатМестонахождениеТС.ТС.ДатаВводаВЭксплуатацию <> ДАТАВРЕМЯ(1, 1, 1)
		|	И уатМестонахождениеТС.ТС.ДатаВводаВЭксплуатацию <= уатМестонахождениеТС.Период
		|	И (уатМестонахождениеТС.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ уатМестонахождениеТС.ТС.ДатаВыбытия >= уатМестонахождениеТС.Период)
		|	И (уатМестонахождениеТС.ТС.ТипТС.НеВыводитьВТабельТС = ЛОЖЬ
		|			ИЛИ уатМестонахождениеТС.ТС.ТипТС.НеВыводитьВТабельТС ЕСТЬ NULL)
		|	И (уатМестонахождениеТС.Состояние.ЭтоПривленный = ЛОЖЬ
		|			ИЛИ уатМестонахождениеТС.Состояние.ЭтоПривленный ЕСТЬ NULL)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТСвЭкпл.ТС КАК ТС,
		|	ТСвЭкпл.ТС.ГаражныйНомер КАК ГаражныйНомер,
		|	ТСвЭкпл.ТС.ГосударственныйНомер КАК ГосударственныйНомер,
		|	СУММА(ВЫБОР
		|			КОГДА уатДокументыТС.ВидДокумента = ЗНАЧЕНИЕ(Справочник.уатВидыДДД.ПТС)
		|				ТОГДА 1
		|		КОНЕЦ) КАК ПТС,
		|	СУММА(ВЫБОР
		|			КОГДА уатДокументыТС.ВидДокумента = ЗНАЧЕНИЕ(Справочник.уатВидыДДД.СвидетельствоОРегистрацииТС)
		|				ТОГДА 1
		|		КОНЕЦ) КАК СТС
		|ПОМЕСТИТЬ врДоки
		|ИЗ
		|	ТСвЭкпл КАК ТСвЭкпл
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатДокументыТС КАК уатДокументыТС
		|		ПО ТСвЭкпл.ТС = уатДокументыТС.ТС
		|			И (уатДокументыТС.Архив = ЛОЖЬ)
		|			И (ВЫБОР
		|				КОГДА уатДокументыТС.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА уатДокументыТС.ДатаОкончания >= &Дт
		|				ИНАЧЕ ИСТИНА = ИСТИНА
		|			КОНЕЦ)
		|			И (уатДокументыТС.ПолноеИмяФайла <> """")
		|
		|СГРУППИРОВАТЬ ПО
		|	ТСвЭкпл.ТС,
		|	ТСвЭкпл.ТС.ГаражныйНомер,
		|	ТСвЭкпл.ТС.ГосударственныйНомер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	врДоки.ТС.Наименование КАК ТС,
		|	врДоки.ГаражныйНомер КАК ГаражныйНомер,
		|	врДоки.ГосударственныйНомер КАК ГосударственныйНомер,
		|	врДоки.ПТС КАК ПТС,
		|	врДоки.СТС КАК СТС,
		|	ВЫБОР
		|		КОГДА НЕ уатХранилищеДополнительнойИнформации.Объект ЕСТЬ NULL
		|			ТОГДА 1
		|	КОНЕЦ КАК Фото
		|ИЗ
		|	врДоки КАК врДоки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатХранилищеДополнительнойИнформации КАК уатХранилищеДополнительнойИнформации
		|		ПО врДоки.ТС = уатХранилищеДополнительнойИнформации.Объект
		|			И (уатХранилищеДополнительнойИнформации.ВидДанных = ЗНАЧЕНИЕ(Перечисление.уатВидыДополнительнойИнформацииОбъектов.Изображение))
		|			И (уатХранилищеДополнительнойИнформации.ПометкаУдаления = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("Дт", ТекущаяДата());
	Запрос.УстановитьПараметр("Мас", Мас);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	хр = Новый ХранилищеЗначения(РезультатЗапроса,Новый СжатиеДанных(5));
	Возврат XMLСтрока(хр);
КонецФункции

Функция ПолучитьРеквизитыТС(пТело) Экспорт
	мСтруктураПараметров = XMLЗначение(Тип("ХранилищеЗначения"), пТело).Получить();
	Если ТипЗнч(мСтруктураПараметров) <> Тип("Структура") Или НЕ (мСтруктураПараметров.Свойство("ГарНомер")) Тогда
		мГарНомер = Неопределено;
		//
		//Возврат "Отсутствует ожидаемая структура с
		//|параметрами в теле запроса: Новый Структура(""ГарНомер"")";
	ИНаче
		мГарНомер = мСтруктураПараметров.ГарНомер;
	КонецЕсли;
	
	вСтруктура = Новый Структура;
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	уатТС.Ссылка КАК GUID,
	|	уатТС.Ссылка КАК Ссылка,
	|	уатТС.Наименование КАК Наименование,
	|	уатТС.Производитель КАК Производитель,
	|	уатТС.Модель КАК Модель,
	|	уатТС.ТипТС.Наименование КАК ТипТС,
	|	уатТС.ГаражныйНомер КАК ГаражныйНомер,
	|	уатТС.ГосударственныйНомер КАК ГосударственныйНомер,
	|	уатТС.VIN КАК VIN,
	|	уатТС.ГодВыпуска КАК ГодВыпуска,
	|	уатТС.КатегорияТехническогоРегламента.Наименование КАК КатегорияТехническогоРегламента,
	|	уатТС.ЦветКузова.Наименование КАК ЦветКузова,
	|	уатТС.НомерШасси КАК НомерШасси,
	|	уатТС.НомерКузова КАК НомерКузова,
	|	уатТС.ДатаПостановкиНаУчетГИБДД КАК ДатаПостановкиНаУчетГИБДД,
	|	уатТС.ДатаВыбытия КАК ДатаВыбытия,
	|	уатТС.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	|	уатТС.МодельДвигателя КАК МодельДвигателя,
	|	уатТС.НомерДвигателя КАК НомерДвигателя,
	|	уатТС.ТипДвигателя КАК ТипДвигателя,
	|	уатТС.ОбъемДВС КАК ОбъемДВС,
	|	уатТС.МощностьДвигателяЛС КАК МощностьДвигателяЛС,
	|	уатТС.МощностьДвигателяКвт КАК МощностьДвигателяКвт,
	|	уатТС.Модель.РабочийОбъемДвигателя КАК МодельРабочийОбъемДвигателя,
	|	уатТС.ТипКПП КАК ТипКПП,
	|	уатТС.НомерКПП КАК НомерКПП,
	|	уатТС.Модель.КатегорияАТСЕЭК КАК МодельКатегорияАТСЕЭК,
	|	уатТС.ПолнаяМассаТС КАК ПолнаяМассаТС,
	|	уатТС.Модель.Грузоподъемность КАК МодельГрузоподъемность,
	|	уатТС.СобственныйВес КАК СобственныйВес,
	|	уатТС.Модель.ОбъемКузова КАК МодельОбъемКузова,
	|	уатТС.КолеснаяФормула КАК КолеснаяФормула,
	|	уатТС.ГабаритныйРазмерДлина КАК ГабаритныйРазмерДлина,
	|	уатТС.ГабаритныйРазмерВысота КАК ГабаритныйРазмерВысота,
	|	уатТС.ГабаритныйРазмерШирина КАК ГабаритныйРазмерШирина,
	|	уатТС.НагрузкаПередняяОсь КАК НагрузкаПередняяОсь,
	|	уатТС.НагрузкаСредняяОсь КАК НагрузкаСредняяОсь,
	|	уатТС.НагрузкаЗадняяОсь КАК НагрузкаЗадняяОсь,
	|	уатТС.КлассЭкологичности.Наименование КАК КлассЭкологичности,
	|	уатТС.ГрузоподъемностьКрана КАК ГрузоподъемностьКрана,
	|	уатТС.СидячихМест КАК СидячихМест,
	|	уатТС.ВсегоМест КАК ВсегоМест,
	|	уатТС.РабочееДавление КАК РабочееДавление,
	|	уатТС.ГрузоподъемностьКМУ КАК ГрузоподъемностьКМУ,
	|	уатТС.ОбъемЦистерны КАК ОбъемЦистерны,
	|	уатТС.ЕмкостьКовша КАК ЕмкостьКовша,
	|	Сведения.Период КАК ДатаСостояния,
	|	Сведения.Владелец.Наименование КАК Владелец,
	|	Сведения.Подразделение.Наименование КАК Подразделение,
	|	Сведения.Состояние КАК Состояние
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(, ) КАК Сведения
	| ПО Сведения.ТС = уатТС.Ссылка
	|ГДЕ уатТС.ГаражныйНомер = &ГарНомер
	|  или (&ГарНомер = Неопределено  и Сведения.Состояние NOT IN (Значение(Справочник.уатСостояниеТС.Привлеченный),Значение(Справочник.уатСостояниеТС.Выбыло)) )
	|
	|");
	
	мЗапрос.УстановитьПараметр("ГарНомер", мГарНомер);
	мРезультат = мЗапрос.Выполнить().Выгрузить();
	
	Если мГарНомер = Неопределено ТОгда  //Все ТС
		Возврат ЗаписатьХранилищеВСтроку(мЗапрос.Выполнить().Выгрузить());		
	ИНаче
		Для Каждого мКолонка Из мРезультат.Колонки Цикл
			вСтруктура.Вставить(мКолонка.Имя, Неопределено);
		КонецЦикла;
		Если мРезультат.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(вСтруктура, мРезультат[0]);
		КонецЕсли;
		Возврат XMLСтрока(Новый ХранилищеЗначения(вСтруктура, Новый СжатиеДанных(5)));
	КонецеСЛИ;
КонецФункции

Функция ИерархияСправочникаРод1Род2(Запрос=Неопределено,ВидСпр,ИмяВременнойТаблицы,ТекстЗапроса="") Экспорт
	
	//ВидСпр = "СтатьиЗатрат";
			//если справочник без групп
	ЕстьГруппы=Истина;
	Если СокрЛП(Метаданные.Справочники[ВидСпр].ВидИерархии) = "ИерархияЭлементов" Тогда
		ЕстьГруппы=Ложь;
	КонецЕСЛИ;
	
	врИерархТбл = "врИерархТбл"+ИмяВременнойТаблицы;
	
	Если Запрос = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	КонецЕСЛИ;
	
	
	Запрос.Текст = "
|ВЫБРАТЬ
|	уатТипыТС2.Родитель КАК Род1,
|	уатТипыТС2.Ссылка   КАК Род2,
|	уатТипыТС2.Ссылка   КАК Ссылка,
|   1 Инд
| INTO "+врИерархТбл+"1
|ИЗ
|	Справочник."+ВидСпр+" КАК уатТипыТС1
|INNER JOIN Справочник."+ВидСпр+" КАК уатТипыТС2 ON  уатТипыТС1.ссылка = уатТипыТС2.Родитель
|ГДЕ
|уатТипыТС1.ЭтоГруппа = Истина
|и  уатТипыТС2.ЭтоГруппа = Истина
|и уатТипыТС1.Родитель = Значение(Справочник."+ВидСпр+".ПустаяСсылка)
|
|
|";
	
	
	
	Если ЕстьГруппы=Ложь тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Спр.ЭтоГруппа","1=1");
	КонецЕСЛИ;
	
	Т = Запрос.Выполнить().Выгрузить();
	ТекстЗапроса = ТекстЗапроса+ Запрос.Текст;
	
	КолСтр = Т[0].Количество;
	
	ДЛя а=1 по 99 Цикл
		
		Запрос.Текст = "
		|SELECT
		|   Тбл.Род1,
		|   Тбл.Род2,
		|	Ссылка,
		|	0 Инд
		|INTO "+врИерархТбл+""+(а+1)+"
		|FROM "+врИерархТбл+""+а+" Тбл
		| 
		|UNION ALL
		|
		| SELECT
		|      ТБл.Род1,
		|      ТБл.Род2,
		|      Спр.Ссылка,
		|      0 Инд
		|  FROM  Справочник."+ВидСпр+" Спр
		|INNER JOIN "+врИерархТбл+""+а+" Тбл ON ТБл.ссылка = Спр.РОдитель и Спр.ЭтоГруппа
		| WHERE Спр.ЭтоГруппа и Спр.РОдитель в (Выбрать ссылка из "+врИерархТбл+""+а+" Т WHERE Инд = 1)
		| 
		|UNION ALL
		|
		| SELECT
		|      Спр.Ссылка,
		|      Спр.Ссылка,
		|     Спр.Ссылка,
		|      1 Инд
		|FROM  Справочник."+ВидСпр+" Спр
		| WHERE Спр.ЭтоГруппа и Спр.РОдитель в (Выбрать ссылка из "+врИерархТбл+""+а+" Т WHERE Инд = 1)
		|
		|";
		
		//если справочник без групп
		Если ЕстьГруппы=Ложь тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"Спр.ЭтоГруппа","1=1");
		КонецЕСЛИ;
		
		Т = Запрос.Выполнить().Выгрузить();
		ТекстЗапроса = ТекстЗапроса+ Запрос.Текст;

		Если КолСтр = Т[0].Количество ТОгда
			
			Запрос.Текст = "SELECT * INTO "+ИмяВременнойТаблицы+" FROM "+врИерархТбл+""+(а+1)+" Тбл ";
			Запрос.Выполнить();
			ПРервать;
		КонецеСЛИ;
		
		КолСтр = Т[0].Количество;
		
	КонецЦикла;
	

      Возврат Запрос;

				   
КонецФункции

Функция ДанныеПрозрачность() Экспорт
	
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц  = Новый МенеджерВременныхТаблиц;
	ИерархияСправочникаРод1Род2(Запрос,"уатТипыТС","врТипыТСРод");
	
	Запрос.Текст = " SELECT род1,род2,ссылка into врТипы FROM врТипыТСРод;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|
	|	уатРасходГСМнаТСОбороты.Период КАК Период,
	|	уатРасходГСМнаТСОбороты.ТС КАК ТС,
	|	уатРасходГСМнаТСОбороты.РасходПоФактуОборот КАК РасходПоФактуОборот
	|ПОМЕСТИТЬ врТбл
	|ИЗ
	|	РегистрНакопления.уатРасходГСМнаТС.Обороты(, , Месяц, ) КАК уатРасходГСМнаТСОбороты
	|ГДЕ
	|	уатРасходГСМнаТСОбороты.РасходПоФактуОборот > 200
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Тбл.ТС КАК ТС,
	|	МАКСИМУМ(Тбл.Период) КАК дтМк
	|ПОМЕСТИТЬ врМакс
	|ИЗ
	|	врТбл КАК Тбл
	|
	|СГРУППИРОВАТЬ ПО
	|	Тбл.ТС
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Тбл.Период) < &Дт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатТС.ГаражныйНомер КАК ГаражныйНомер,
	|	уатТС.Ссылка КАК GUID_ТС,
	|	уатТС.Наименование КАК ТС,
	|	уатТС.ГосударственныйНомер КАК ГосударственныйНомер,
	|	уатТС.ГодВыпуска КАК ГодВыпуска,
	|	ВЫБОР
	|		КОГДА уатТС.ГодВыпуска < 2015
	|			ТОГДА ""Свыше 7 лет""
	|		ИНАЧЕ ""До 7 лет""
	|	КОНЕЦ КАК новГод,
	|	СпрТипы.Наименование КАК ТипТС,
	
	|	СпрТипыРод1.ИмяПредопределенныхДанных Род1,
	|	СпрТипыРод2.Наименование Род2,
	
	|	уатМестонахождениеТССрезПоследних.Организация.Наименование КАК Организация,
	|	уатМестонахождениеТССрезПоследних.Подразделение.Наименование КАК Подразделение,
	|	уатМестонахождениеТССрезПоследних.Состояние.Наименование КАК Состояние,
	|   CASE WHEN уатМестонахождениеТССрезПоследних.Состояние.ВидСостояния В (&МасВидСос) THEN 1 ELSE 0 END этоКонсервация,
	
	|	уатМестонахождениеТССрезПоследних.Период КАК ДатаСобытия,
	|   РазностьДат(естьnull(тблМакс.дтМк, &Дт), &Дт, МЕСЯЦ) МесяцевПростоя,
	|	1 КАК Количество,
	|	уатТС.ДатаВыбытия КАК ДатаВыбытия,
	|	уатТС.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	|	тблМакс.дтМк КАК ДтРаботы
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&Дт, ) КАК уатМестонахождениеТССрезПоследних
	|		ПО (уатМестонахождениеТССрезПоследних.ТС = уатТС.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ врМакс КАК тблМакс
	|		ПО (тблМакс.ТС = уатТС.Ссылка)
	|
	|     left outer join Справочник.уатТипыТС СпрТипы ON СпрТипы.ссылка = уатТС.ТипТС
	|     LEFT OUTER JOIN врТипы тблТипы ON тблТипы.ссылка = СпрТипы.Родитель
	|     left outer join Справочник.уатТипыТС СпрТипыРод1 ON СпрТипыРод1.ссылка = тблТипы.Род1
	|     left outer join Справочник.уатТипыТС СпрТипыРод2 ON СпрТипыРод2.ссылка = тблТипы.Род2
	|
	|
	|ГДЕ
	|	уатТС.ДатаВводаВЭксплуатацию > ДАТАВРЕМЯ(1, 1, 1)
	|	И (уатТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатТС.ДатаВыбытия > &Дт)
	|	И уатМестонахождениеТССрезПоследних.Состояние.ЭтоПривленный = ЛОЖЬ
	|	//закомментировано 01.10.2021 т.к. нужны прицепы, а все типы прицепов с этой галкой
	|	//И уатТС.ТипТС.НеВыводитьВТабельТС = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатТС.упрМодель.Наименование,
	|	уатТС.Наименование";
	
	Запрос.УстановитьПараметр("Дт", ТекущаяДата());
	мМассивВидовСостояний = Новый Массив;
	мМассивВидовСостояний.Добавить(Перечисления.уатВидыСостоянийТС.НаКонсервации);
	мМассивВидовСостояний.Добавить(Перечисления.уатВидыСостоянийТС.НаКонсервацииПродажа);
	Запрос.УстановитьПараметр("МасВидСос", мМассивВидовСостояний);
	
	Возврат ЗаписатьХранилищеВСтроку(Запрос.Выполнить().Выгрузить());
КонецФункции

Функция ТипыПрозрачность() Экспорт
	Тбл = Справочники.уатТипыТС.ПолучитьТипыЮралс();
	Возврат  ЗаписатьХранилищеВСтроку(Тбл);
КонецФункции

Функция ПолучитьДокументыТС(пТело) Экспорт
	вСтруктура = Новый Структура;
	мСтруктураПараметров = XMLЗначение(Тип("ХранилищеЗначения"), пТело).Получить();
	Если ТипЗнч(мСтруктураПараметров) <> Тип("Структура") Или НЕ (мСтруктураПараметров.Свойство("ГарНомер")) Тогда
		Возврат "Отсутствует ожидаемая структура с
		|параметрами в теле запроса: Новый Структура(""ГарНомер"")";
	КонецЕсли;
	мГарНомер = мСтруктураПараметров.ГарНомер;
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	уатДокументыТС.ТС КАК ТС,
	|	уатДокументыТС.ВидДокумента КАК ВидДокумента,
	|	уатДокументыТС.Архив КАК Архив,
	|	уатДокументыТС.ПолноеИмяФайла <> """" КАК ЕстьФайл,
	|	ВЫБОР
	|		КОГДА уатДокументыТС.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА уатДокументыТС.ДатаОкончания
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК дтКон,
	|	МАКСИМУМ(уатДокументыТС.ДатаОкончания) КАК дтМакс
	|ПОМЕСТИТЬ врУатДокументыТС0
	|ИЗ
	|	РегистрСведений.уатДокументыТС КАК уатДокументыТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыИсключения.СрезПоследних(, ) КАК РегИскл
	|		ПО (РегИскл.ВидДокумента = уатДокументыТС.ВидДокумента)
	|			И (РегИскл.ОбъектДок = уатДокументыТС.ТС)
	|			И (РегИскл.Исключить = ИСТИНА)
	|ГДЕ
	|	уатДокументыТС.ТС.ГаражныйНомер = &ГаражныйНомер
	|	И РегИскл.ОбъектДок ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	уатДокументыТС.ТС,
	|	уатДокументыТС.Архив,
	|	уатДокументыТС.ВидДокумента,
	|	уатДокументыТС.ПолноеИмяФайла <> """",
	|	ВЫБОР
	|		КОГДА уатДокументыТС.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА уатДокументыТС.ДатаОкончания
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатДокументыТС.ТС КАК ТС,
	|	уатДокументыТС.ВидДокумента КАК ВидДокумента,
	|	уатДокументыТС.Архив КАК Архив,
	|	уатДокументыТС.ПолноеИмяФайла КАК ПолноеИмяФайла,
	|	уатДокументыТС.ПолноеИмяФайла <> """" КАК ЕстьФайл,
	|	МАКСИМУМ(уатДокументыТС.Серия) КАК Серия,
	|	МАКСИМУМ(уатДокументыТС.Номер) КАК Номер,
	|	МАКСИМУМ(уатДокументыТС.ДатаВыдачи) КАК ДатаВыдачи,
	|	МАКСИМУМ(уатДокументыТС.ДатаОкончания) КАК ДатаОкончания,
	|	РАЗНОСТЬДАТ(&ТекущаяДата, ВЫБОР
	|			КОГДА МАКСИМУМ(уатДокументыТС.ДатаОкончания) = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДАТАВРЕМЯ(2050, 1, 1)
	|			ИНАЧЕ МАКСИМУМ(уатДокументыТС.ДатаОкончания)
	|		КОНЕЦ, ДЕНЬ) КАК Дней
	|ПОМЕСТИТЬ врУатДокументыТС1
	|ИЗ
	|	РегистрСведений.уатДокументыТС КАК уатДокументыТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врУатДокументыТС0 КАК ТБл
	|		ПО (ТБл.ТС = уатДокументыТС.ТС)
	|			И (ТБл.ВидДокумента = уатДокументыТС.ВидДокумента)
	|			И (ЕСТЬNULL(ТБл.дтКон, ТБл.дтМакс) = уатДокументыТС.ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатДокументыТС.ТС,
	|	уатДокументыТС.Архив,
	|	уатДокументыТС.ВидДокумента,
	|	уатДокументыТС.ПолноеИмяФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(уатДокументыТС.ВидДокумента, СпрДДД.Ссылка) КАК ВидДокумента,
	|	уатДокументыТС.ТС КАК ТС,
	|	уатДокументыТС.Серия КАК Серия,
	|	уатДокументыТС.Номер КАК Номер,
	|	уатДокументыТС.ПолноеИмяФайла КАК ПолноеИмяФайла,
	|	уатДокументыТС.ДатаВыдачи КАК ДатаВыдачи,
	|	уатДокументыТС.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Справочник.уатТС КАК спрТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних КАК уатМестонахождениеТССрезПоследних
	|		ПО спрТС.Ссылка = уатМестонахождениеТССрезПоследних.ТС
	|			И (уатМестонахождениеТССрезПоследних.Состояние.ЗапретитьВыпискуПЛ = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ врУатДокументыТС1 КАК уатДокументыТС
	|		ПО спрТС.Ссылка = уатДокументыТС.ТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатВидыДДД КАК СпрДДД
	|		ПО (СпрДДД.Ссылка = уатДокументыТС.ВидДокумента
	|				ИЛИ уатДокументыТС.ТС ЕСТЬ NULL)
	|			И (СпрДДД.ДляТС = ИСТИНА)
	|			И (СпрДДД.ОбязательныйДляВсех = ИСТИНА)
	|ГДЕ
	|	спрТС.Ссылка.ГаражныйНомер = &ГаражныйНомер
	|	
	|	И (ЕСТЬNULL(СпрДДД.ОбязательныйДляВсех, ЛОЖЬ) = ИСТИНА
	|			ИЛИ уатДокументыТС.ТС ЕСТЬ НЕ NULL )
	|	И уатДокументыТС.Архив = ЛОЖЬ");
	мЗапрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	мЗапрос.УстановитьПараметр("ГаражныйНомер", мГарНомер);
	МассивДокументов = Новый Массив;
	
	мВыборкаИзображений = мЗапрос.Выполнить().Выбрать();
	Пока мВыборкаИзображений.Следующий() Цикл
		мСтруктураКлючаЗаписи = Новый Структура("ТС, ВидДокумента, Серия, Номер");
		ЗаполнитьЗначенияСвойств(мСтруктураКлючаЗаписи, мВыборкаИзображений);
		мДвоичныеДанные = ПолучитьДвоичныеДанныеИзображенияИзРегистра("уатДокументыТС", мСтруктураКлючаЗаписи, "Изображение");
		мСтруктура = Новый Структура("Серия, Номер, ДатаВыдачи, ДатаОкончания, ПолноеИмяФайла");
		ЗаполнитьЗначенияСвойств(мСтруктура, мВыборкаИзображений);
		мСтруктура.Вставить("Изображение", мДвоичныеДанные);
		мСтруктура.Вставить("ВидДокумента", мВыборкаИзображений.ВидДокумента.Наименование);
		МассивДокументов.Добавить(мСтруктура);
	КонецЦикла;
	
	вСтруктура.Вставить("МассивДокументов", МассивДокументов);
	Возврат XMLСтрока(Новый ХранилищеЗначения(вСтруктура, Новый СжатиеДанных(5)));
КонецФункции

Функция ПолучитьАктуальныеДокументыТС(пТело) Экспорт
	
	мМас = XMLЗначение(Тип("ХранилищеЗначения"), пТело).Получить();
	
	мас = новый МАссив;
	Для каждого мЭл из мМас Цикл
		мас.Добавить(Справочники.уатТС.Получитьссылку(Новый УникальныйИдентификатор(мЭл)));
	КонецЦикла;
	
	Возврат ЗаписатьХранилищеВСтроку(РегистрыСведений.уатДокументыТС.ПолучитьАктуальныеДокументы(мас));
	
КонецФункции

Функция ПолучитьДвоичныеДанныеИзображенияИзРегистра(пИмяРегистра, пОтбор, пИмяРеквизитаДвоичныхДанных) Экспорт
	мМенеджерЗаписи = РегистрыСведений[пИмяРегистра].СоздатьМенеджерЗаписи();
	Для Каждого мПараКлючЗначение Из пОтбор Цикл
		мМенеджерЗаписи[мПараКлючЗначение.Ключ] = мПараКлючЗначение.Значение;
	КонецЦикла;
	мМенеджерЗаписи.Прочитать();
	мДвоичныеДанныеФайла = мМенеджерЗаписи[пИмяРеквизитаДвоичныхДанных].Получить();
	Возврат мДвоичныеДанныеФайла;
КонецФункции

Функция РеквизитыТС(Тело, пПараметрыАдреснойСтроки) Экспорт
	Мас = XMLЗначение(Тип("ХранилищеЗначения"),Тело).Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	уатТС.Ссылка КАК Ссылка0,
	|	уатТС.ГаражныйНомер КАК Код,
	|	уатТС.Наименование КАК Наименование,
	|	уатТС.ГосударственныйНомер КАК ГосНомер,
	|	уатТС.ТипТС КАК ТипТСGUID,
	|	уатТС.ТипТС.Код КАК ТипТСКод,
	|	уатТС.ТипТС.Наименование КАК ТипТСНаименование,
	|	уатТС.VIN КАК VIN,
	|	уатТС.ГодВыпуска КАК ГодВыпуска,
	|	уатТС.ДатаВводаВЭксплуатацию КАК ДатаВводаВЭксплуатацию,
	|	уатТС.ДатаВыбытия КАК ДатаВыбытия,
	|	уатТС.Модель КАК МодельGUID,
	|	уатТС.Модель.Наименование КАК МодельНаименование,
	|	уатТС.Модель.Код КАК МодельКод,
	|	уатТС.Модель.МощностьДвигателяЛС КАК МощностьДвигателяЛС,
	|	уатТС.упрМодель КАК упрМодельGUID,
	|	уатТС.упрМодель.Код КАК упрМодельКод,
	|	уатТС.упрМодель.Наименование КАК упрМодельНаименование,
	|	уатТС.КатегорияТехническогоРегламента КАК КатегорияТехническогоРегламентаGUID,
	|	уатТС.КатегорияТехническогоРегламента.Код КАК КатегорияТехническогоРегламентаКод,
	|	уатТС.КатегорияТехническогоРегламента.Наименование КАК КатегорияТехническогоРегламентаНаименование
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	уатТС.ГаражныйНомер В(&Мас)";
	Запрос.УстановитьПараметр("Мас",Мас);
	мРезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если мРезультатЗапроса.Количество() > 0 Тогда
		пТранспортноеСредство = мРезультатЗапроса[0].Ссылка0;
		мПолучатьЭскизы = (Метаданные.Справочники.уатХранилищеДополнительнойИнформации.Реквизиты.Найти("ХранилищеЭскиз") <> Неопределено);
		мВторойЗапрос = Новый Запрос("ВЫБРАТЬ
		|	уатСчетчикиТССрезПоследних.Значение КАК Пробег ПОМЕСТИТЬ Пробеги
		|ИЗ
		|	РегистрСведений.уатСчетчикиТС.СрезПоследних(&ТекущаяДата) КАК уатСчетчикиТССрезПоследних
		|ГДЕ
		|	уатСчетчикиТССрезПоследних.ТС = &ТС
		|;ВЫБРАТЬ
		|	уатМестонахождениеТССрезПоследних.Состояние КАК Состояние, Пробеги.Пробег КАК Пробег
		|ИЗ
		|	РегистрСведений.уатМестонахождениеТС.СрезПоследних(, ТС = &ТС) КАК уатМестонахождениеТССрезПоследних
		|ЛЕВОЕ СОЕДИНЕНИЕ Пробеги КАК Пробеги ПО ИСТИНА");
		мВторойЗапрос.УстановитьПараметр("ТС", пТранспортноеСредство);
		мВторойЗапрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		мРезультатВторой = мВторойЗапрос.Выполнить().Выгрузить();
		
		вСтруктура = Новый Структура();
		вСтруктура.Вставить("Реквизиты", мРезультатЗапроса);
		Если мРезультатВторой.Количество() > 0 Тогда
			вСтруктура.Вставить("Пробег", ?(Не ЗначениеЗаполнено(мРезультатВторой[0].Пробег), 0, Строка(мРезультатВторой[0].Пробег)));
			вСтруктура.Вставить("Состояние", Строка(мРезультатВторой[0].Состояние));
		Иначе
			вСтруктура.Вставить("Пробег", 0);
			вСтруктура.Вставить("Состояние", "---");
		КонецЕсли;
		
		мМассивФотографий = Новый Массив;
		мОтборФото = Новый Структура("Объект", пТранспортноеСредство);
		мВыборкаСправочникаФайлов = Справочники.уатХранилищеДополнительнойИнформации.Выбрать( , , мОтборФото);
		Пока мВыборкаСправочникаФайлов.Следующий() Цикл
			Если мВыборкаСправочникаФайлов.ВидДанных = Перечисления.уатВидыДополнительнойИнформацииОбъектов.Изображение Тогда
				мДвоичныеДанные = мВыборкаСправочникаФайлов.Хранилище.Получить();
				Если мПолучатьЭскизы И мВыборкаСправочникаФайлов.ЭскизСформирован Тогда
					мДвоичныеДанныеЭскиза = мВыборкаСправочникаФайлов.ХранилищеЭскиз.Получить();
					Если мДвоичныеДанныеЭскиза <> Неопределено Тогда
						мДвоичныеДанные = мДвоичныеДанныеЭскиза;
					КонецЕсли;
				КонецЕсли;
				мМассивФотографий.Добавить(мДвоичныеДанные);
			КонецЕсли;
		КонецЦикла;
		
		вСтруктура.Вставить("МассивФотографий", мМассивФотографий);
		Возврат XMLСтрока(Новый ХранилищеЗначения(вСтруктура, Новый СжатиеДанных(5)));
	КонецЕсли;
КонецФункции

Функция ДанныеПоРемонтамТекст(пПараметрыАдреснойСтроки=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	уатРемонтныйЛист.Организация Организация,
	|	уатРемонтныйЛист.Номер Номер,
	|	уатРемонтныйЛист.Дата дт,
	|	уатРемонтныйЛист.ТС.ГаражныйНомер ГарНомер,
	|	уатРемонтныйЛист.ТС ТС,
	|	уатРемонтныйЛист.ТС ТСGUID,
	|	уатРемонтныйЛист.ТС.ГосударственныйНомер ГосНомер,
	|	уатРемонтныйЛист.ВидОбслуживания.Наименование ВидОбслуживания,
	|	уатРемонтныйЛист.ДатаНачала Дт1,
	|	уатРемонтныйЛист.ДатаОкончания Дт2,
	|	уатРемонтныйЛистРаботы.Работа.Родитель.Родитель.Наименование ГруппаРабот,
	|	уатРемонтныйЛистРаботы.Работа.Родитель.Наименование КатегорияРабот,
	|	уатРемонтныйЛистРаботы.Работа.Наименование Работа,
	|	уатРемонтныйЛист.МеханикРММ.Наименование ФиоРММ
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|LEFT OUTER JOIN	Документ.уатРемонтныйЛист.Работы КАК уатРемонтныйЛистРаботы ON уатРемонтныйЛист.Ссылка = уатРемонтныйЛистРаботы.Ссылка
	|WHERE ссылка.Дата >= ДатаВремя(2018,1,1) И ссылка.Дата МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаВыгрузки, ДЕНЬ, -365) И НАЧАЛОПЕРИОДА(&ДатаВыгрузки, ДЕНЬ)
	|    и уатРемонтныйЛист.ПометкаУдаления = Ложь
	|    и уатРемонтныйЛист.Проведен = Истина";
	
	Запрос.УстановитьПараметр("ДатаВыгрузки", ТекущаяДата());
	ТБл  = Запрос.Выполнить().Выгрузить();
	
	Если пПараметрыАдреснойСтроки<>Неопределено и пПараметрыАдреснойСтроки.свойство("tbl") Тогда
		Возврат ЗаписатьХранилищеВСтроку(Тбл);
	КонецесЛИ;
	
	
	
	итТ = Новый ТаблицаЗначений;
	итТ.Колонки.Добавить("_Орг"); 
	итТ.Колонки.Добавить("_Номер"); 
	итТ.Колонки.Добавить("_Дата");
	итТ.Колонки.Добавить("_ГарНомер");
	итТ.Колонки.Добавить("_ТС");
	итТ.Колонки.Добавить("_ГосНомер");
	итТ.Колонки.Добавить("_ВидОбслуживания");
	итТ.Колонки.Добавить("_ДатаНАч");
	итТ.Колонки.Добавить("_ДатаКон");
	итТ.Колонки.Добавить("_ГруппаРабот");
	итТ.Колонки.Добавить("_КатегорияРабот");
	итТ.Колонки.Добавить("_Работа");
	итТ.Колонки.Добавить("_ФиоРММ");
	
	Для каждого Стр из Тбл Цикл
		НовСтр = итТ.Добавить();
		НовСтр._Орг = Стр.Организация;
		НовСтр._Номер = ФРМстр(Стр.Номер);
		НовСтр._Дата = Формат(Стр.Дт,"ДФ=yyyy-MM-dd");
		НовСтр._ГарНомер = ФРМстр(Стр.ГарНомер);
		НовСтр._ТС = ФРМстр(Стр.ТС);
		НовСтр._ГосНомер = ФРМстр(Стр.ГосНомер);
		НовСтр._ВидОбслуживания = ФРМстр(Стр.ВидОбслуживания);
		НовСтр._ДатаНАч = Формат(Стр.Дт1,"ДФ=yyyy-MM-dd");
		НовСтр._ДатаКон = Формат(Стр.Дт2,"ДФ=yyyy-MM-dd");
		НовСтр._ГруппаРабот = ФРМстр(Стр.ГруппаРабот);
		НовСтр._КатегорияРабот = ФРМстр(Стр.КатегорияРабот);
		НовСтр._Работа = ФРМстр(Стр.Работа);
		НовСтр._ФиоРММ = ФРМстр(Стр.ФиоРММ);
	КонецЦикла;
	
	Стр1 = "";
	Стр2 = "";
	Для каждого Кол из итТ.Колонки Цикл
		Если Кол.ТипЗначения = Новый ОписаниеТипов("Число") ТОгда
			Стр2 = Стр2 + "," + Кол.Имя;
		ИНАче
			Стр1 = Стр1 + "," + Кол.Имя;
		КонецеСЛИ;
	Конеццикла;
	
	МасКол = Новый Массив;
	ДЛя каждого Кол из Тбл.Колонки Цикл
		МасКол.Добавить(Кол.Имя);
	КонецЦикла;
	
	Тхт = Новый ТекстовыйДокумент;
	ТекСтр = "";
	Для каждого эл из МасКол Цикл
		ТекСтр = ТекСтр + Эл + ";";
	Конеццикла;
	
	тхт.ДобавитьСтроку(ТекСтр);
	Для каждого Стр из Тбл Цикл
		ТекСтр = "";
		Для каждого эл из МасКол Цикл
			ТекСтр = ТекСтр + Стр[эл] + ";";
		Конеццикла;
		тхт.ДобавитьСтроку(ТекСтр);
	КонецЦикла;
	тхт.УстановитьТипФайла("UTF-8");
	Возврат тхт.ПолучитьТекст();
КонецФункции

Функция ФРМстр(Стр)
	рез = СтрЗаменить(Стр, "  ", " ");
	рез = СтрЗаменить(Рез, ".", "");
	рез = СтрЗаменить(Рез, ";", "");
	рез = ВРег(Рез);
	Возврат рез;
КонецФункции

Функция ТаблицаЗапросовПрозрачность() Экспорт
	вМассив = Новый Массив;
	мНаборЗаписей = РегистрыСведений.рсш_ПОТОК_БазыОрганизаций.СоздатьНаборЗаписей();
	мНаборЗаписей.Прочитать();
	Если мНаборЗаписей.Количество() > 0 Тогда
		Для Каждого мЗапись Из мНаборЗаписей Цикл
			Если ЗначениеЗаполнено(мЗапись.APIrestENT) Тогда
				вМассив.Добавить(СформироватьСтруктуруЗапросаКОрганизации(?(ЗначениеЗаполнено(мЗапись.ShortName), мЗапись.ShortName, мЗапись.Наименование), ?(ЗначениеЗаполнено(мЗапись.ВнутреннийАдресENT), мЗапись.ВнутреннийАдресENT, мзапись.ВнутреннийАдрес), мзапись.ВнутреннийАдрес, мЗапись.APIrestENT, мЗапись.APIrest, "flowAPI", мЗапись.Код));
			КонецЕсли;
		КонецЦикла;
	Иначе
		//если данных в регистре нет - берем статику
		вМассив.Добавить(СформироватьСтруктуруЗапросаКОрганизации("ООО 'НСТ'", "192.168.50.11", , "ENT", "BUH", "flowAPI"));
		вМассив.Добавить(СформироватьСтруктуруЗапросаКОрганизации("ООО 'МТС'", "192.168.50.11", , "ENTMTS", "BuhMTS", "flowAPI"));
		вМассив.Добавить(СформироватьСтруктуруЗапросаКОрганизации("ООО 'НВДС'", "192.168.20.13", , "ENT", "buh", "flowAPI"));
		вМассив.Добавить(СформироватьСтруктуруЗапросаКОрганизации("ООО 'МТК'", "192.168.90.7", , "Proizv", "BUH", "flowAPI"));
		вМассив.Добавить(СформироватьСтруктуруЗапросаКОрганизации("ООО 'УТТ-Восток'", "192.168.83.9", , "EntUTT", "BuhUTT", "flowAPI"));
		вМассив.Добавить(СформироватьСтруктуруЗапросаКОрганизации("ООО 'ЧАТ'", "10.8.85.12", , "chat_pl", "chat_bp", "flowAPI"));
		вМассив.Добавить(СформироватьСтруктуруЗапросаКОрганизации("ООО 'СТ'", "172.20.0.3", , "ST_ENT", "ST_BUH", "flowAPI"));
		вМассив.Добавить(СформироватьСтруктуруЗапросаКОрганизации("ООО 'ТС'", "192.168.130.8", "azure1c.westeurope.cloudapp.azure.com", "Ent_TS", "BuhTS", "flowAPI"));
	КонецЕсли;
	
	Возврат XMLСтрока(Новый ХранилищеЗначения(вМассив, Новый СжатиеДанных(5)));
КонецФункции

Функция ПолучитьСтруктуруПубликацииПоИНН(пИНН) Экспорт
	мНаборЗаписей = РегистрыСведений.рсш_ПОТОК_БазыОрганизаций.СоздатьНаборЗаписей();
	мНаборЗаписей.Прочитать();
	
	Для Каждого мЗапись Из мНаборЗаписей Цикл
		Если СокрЛП(мЗапись.Код) = СокрЛП(пИНН) Тогда
			Возврат СформироватьСтруктуруЗапросаКОрганизации(?(ЗначениеЗаполнено(мЗапись.ShortName), мЗапись.ShortName, мЗапись.Наименование), ?(ЗначениеЗаполнено(мЗапись.ВнутреннийАдресENT), мЗапись.ВнутреннийАдресENT, мзапись.ВнутреннийАдрес), мзапись.ВнутреннийАдрес, мЗапись.APIrestENT, мЗапись.APIrest, "flowAPI");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Функция СформироватьСтруктуруЗапросаКОрганизации(пИмя, пАдресПроизводство, пАдресБухгалтерия, пИмяПубликацииПроизводство, пИмяПубликацииБухгалтерия, пИмяАпиПроизводства, пИНН = Неопределено)
	вСтруктура = Новый Структура();
	вСтруктура.Вставить("Наименование", пИмя);
	вСтруктура.Вставить("Наименование", пИмя);
	вСтруктура.Вставить("ВнутреннийАдрес", пАдресПроизводство);
	вСтруктура.Вставить("ВнутреннийАдресБух", ?(пАдресБухгалтерия = Неопределено, пАдресПроизводство, пАдресБухгалтерия));
	вСтруктура.Вставить("APIrestENT", пИмяПубликацииПроизводство);
	вСтруктура.Вставить("APIrest", пИмяПубликацииБухгалтерия);
	вСтруктура.Вставить("ИмяАпиПроизводства", пИмяАпиПроизводства);
	вСтруктура.Вставить("ИНН", пИНН);
	Возврат вСтруктура;
КонецФункции
#КонецОбласти

#Область ЭЦП
Функция СформироватьЖурналОсмотров(пТело) Экспорт
	вСтруктура = Новый Структура;
	мСтруктураПараметров = XMLЗначение(Тип("ХранилищеЗначения"), пТело).Получить();
	Если ТипЗнч(мСтруктураПараметров) <> Тип("Структура") Или (НЕ мСтруктураПараметров.Свойство("ДатаНачала")) Или (НЕ мСтруктураПараметров.Свойство("ДатаОкончания")) Тогда
		Возврат "Отсутствует ожидаемая структура с
		|параметрами в теле запроса: Новый Структура(""ДатаНачала, ДатаОкончания"")";
	КонецЕсли;
	//мФизЛицо = Неопределено;
	мПользовательМобильногоПриложения = "";
	Если мСтруктураПараметров.Свойство("ФизЛицоGUID") Тогда
		//мФизЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(мСтруктураПараметров.ФизЛицоGUID));
		//мПользовательМобильногоПриложения = НайтиПользователяМобильногоПриложенияПоФизЛицу(мФизЛицо);
		мПользовательМобильногоПриложения = мСтруктураПараметров.ФизЛицоGUID;
	КонецЕсли;
	мТабличныйДокумент = Обработки.ПечатьЖурналаОсмотровТС.Создать().СформироватьЖурналНаСервере(мСтруктураПараметров.ДатаНачала, мСтруктураПараметров.ДатаОкончания, Ложь, Ложь, Неопределено, мПользовательМобильногоПриложения);
	
	мХранилище = Новый ХранилищеЗначения(мТабличныйДокумент, Новый СжатиеДанных(5));
	Возврат XMLСтрока(мХранилище);
КонецФункции

Функция НайтиПользователяМобильногоПриложенияПоФизЛицу(пФизЛицо)
	мЗапрос = Новый Запрос("ВЫБРАТЬ
	|	ПользователиМобильногоПриложения.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ПользователиМобильногоПриложения КАК ПользователиМобильногоПриложения
	|ГДЕ
	|	ПользователиМобильногоПриложения.ФизЛицо = &ФизЛицо");
	мЗапрос.УстановитьПараметр("ФизЛицо", пФизЛицо);
	мРезультат = мЗапрос.Выполнить().Выбрать();
	Если мРезультат.Следующий() Тогда
		Возврат мРезультат.Наименование;
	КонецЕсли;
	
	Возврат "";
КонецФункции

Функция ПодписатьТабличныйДокумент(пТело) Экспорт
	мСтруктураПараметров = XMLЗначение(Тип("ХранилищеЗначения"), пТело).Получить();
	Если ТипЗнч(мСтруктураПараметров) <> Тип("Структура") Или (НЕ мСтруктураПараметров.Свойство("Мета")) Или (НЕ мСтруктураПараметров.Свойство("ФизЛицоGUID")) Или (НЕ мСтруктураПараметров.Свойство("ТабличныйДокумент")) Тогда
		Возврат "Отсутствует ожидаемая структура с
		|параметрами в теле запроса: Новый Структура(""Мета (строка), ФизЛицоGUID (Строка 36), ТабличныйДокумент"")";
	КонецЕсли;
	вРезультат = "ПоискФизЛица";
	мФизЛицо = Справочники.ФизическиеЛица.ПолучитьСсылку(Новый УникальныйИдентификатор(мСтруктураПараметров.ФизЛицоGUID));
	пСтруктураДополнительныеДанных = Новый Структура("ДатаНачала, ДатаОкончания, Расшифровка");
	ЗаполнитьЗначенияСвойств(пСтруктураДополнительныеДанных, мСтруктураПараметров);
	Если СокрЛП(мФизЛицо.Наименование) <> "" Тогда
		вРезультат = "ВыполнениеЗапроса";
		РегистрыСведений.ксПодписанныеДокументыЦЭП.Подписать(мСтруктураПараметров.Мета, мФизЛицо, мСтруктураПараметров.ТабличныйДокумент, вРезультат, пСтруктураДополнительныеДанных);
	КонецЕсли;
	
	мХранилище = Новый ХранилищеЗначения(вРезультат, Новый СжатиеДанных(5));
	Возврат XMLСтрока(мХранилище);
КонецФункции
#КонецОбласти

#Область РегламентныеЗадания
Процедура ОбновитьРегистрБазыОрганизаций() Экспорт
	мСоединение = Новый HTTPСоединение("azure1c.westeurope.cloudapp.azure.com", 80, "", "");
	мЗапрос = Новый HTTPЗапрос("/ServiceMP/hs/ksAPI/ALLORG");
	//Если пТело<>Неопределено Тогда
	//	мХранилище = Новый ХранилищеЗначения(пТело);
	//	мЗапрос.УстановитьТелоИзСтроки(XMLстрока(мХранилище));
	//КонецЕсли;
	
	мДанные = Неопределено;
	мРезультат = мСоединение.POST(мЗапрос);
	Если мРезультат.КодСостояния <> 200 Тогда
		Возврат;
	Иначе
		мДанные = XMLЗначение(Тип("ХранилищеЗначения"), мРезультат.ПолучитьТелоКакСтроку()).Получить()[1];
	КонецЕсли;
	
	Если мДанные <> Неопределено Тогда
		//очистка регистра
		мНаборЗаписей = РегистрыСведений.рсш_ПОТОК_БазыОрганизаций.СоздатьНаборЗаписей();
		мНаборЗаписей.Прочитать();
		мНаборЗаписей.Очистить();
		мНаборЗаписей.Записать();
		
		//запись
		Для Каждого мСтрока Из мДанные Цикл
			мМенеджерЗаписи = РегистрыСведений.рсш_ПОТОК_БазыОрганизаций.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(мМенеджерЗаписи, мСтрока);
			мМенеджерЗаписи.Записать(Истина);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти